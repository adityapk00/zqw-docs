{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"zec-qt-wallet Documentation \u00b6 zec-qt-wallet is a z-Addr first, Sapling compatible wallet and full node for zcashd that runs on Linux, Windows and macOS. Download for MacOS/Windows/Linux zec-qt-wallet is NOT an official wallet, and is not affiliated with the Electric Coin Company in any way.","title":"Home"},{"location":"#zec-qt-wallet-documentation","text":"zec-qt-wallet is a z-Addr first, Sapling compatible wallet and full node for zcashd that runs on Linux, Windows and macOS. Download for MacOS/Windows/Linux zec-qt-wallet is NOT an official wallet, and is not affiliated with the Electric Coin Company in any way.","title":"zec-qt-wallet Documentation"},{"location":"android/","text":"Android Companion App \u00b6 The Android app is beta software. Although everything will work fine on mainnet, since this is beta software, it is recommended you run it on the Zcash testnet. Add testnet=1 into your zcash.conf to enable the testnet . ZecQT Android is an Android frontend for zec-qt-wallet that lets you send and receive shielded payments from your mobile phone. It is available on the Google Play Store or via direct download of the APK . Run zec-qt-wallet \u00b6 In order to let your Android phone connect to your desktop, you need to the deskop zec-qt-wallet . After your node is synced, go to Apps -> Connect Mobile App to view the connection QR Code, which you can scan from the Android App. Install the Android APK directly \u00b6 If you\u2019re installing the APK directly, you\u2019ll need to allow Install from untrusted sources on your Android phone. Android App FAQ \u00b6 What is a \u201cdirect connection\u201d vs \u201cAllow connections over the internet via zecqtwallet wormhole\u201d \u00b6 When your phone and your desktop are on the same network (eg. on your home network), your phone can directly reach your desktop over your local network (if there are no firewalls blocking the connection). In this scenario, your phone directly communicates with your desktop zec-qt-wallet. This is the default. If your phone is on a different network (if you\u2019re connected via 4G/LTE, for example) or if your desktop zec-qt-wallet is behind a firewall, your phone can\u2019t directly reach your desktop. In this scenario, your phone and desktop both connect to a service run by zec-qt-wallet (called wormhole.zecqtwallet.com), which routes information between your phone and your desktop. How can I ensure that only direct connections are enabled? \u00b6 This is already the default. If you want to connect over the internet via wormhole.zecqtwallet.com, you will need to opt-in by checking the Connect over internet via zec-qt-wallet wormhole checkbox on the connection page. You can also disable connecting over the internet via zec-qt-wallet wormhole in the Android app\u2019s settings. What data can the wormhole service see? \u00b6 All communication is encrypted end-to-end, so the wormhole service can\u2019t see the content of your messages. It can see some meta-data like the IP addresses and date/timestamps. Both your phone and your desktop connect to wormhole.zecqtwallet.com over HTTPS. Will it always connect via the wormhole service? \u00b6 The Android app will first attempt a direct connection each time you open the App. If a direct connection is not possible, it will then attempt to connect via wormhole (if enabled) How can I connect over the internet without using the wormhole service? \u00b6 You\u2019ll need to install a VPN on your home network, so you can VPN into your network from 4G/LTE networks, and then connect directly to your node. For example, you can use a service such as Pi VPN . Currently known limitations \u00b6 After you download and install the APK, launch the program and scan the QR Code from your desktop to connect the two. Currently known limitations Old-style Sprout addresses are not supported You can\u2019t select which address to send from. zec-qt-wallet will try to send Transactions from a Sapling address, given you have enough balance You can\u2019t generate new z-addrs or t-addrs from the phone. Issues or feature requests \u00b6 Please file all the feedback you can. You can file issues in the issues tab .","title":"Android Companion App"},{"location":"android/#android-companion-app","text":"The Android app is beta software. Although everything will work fine on mainnet, since this is beta software, it is recommended you run it on the Zcash testnet. Add testnet=1 into your zcash.conf to enable the testnet . ZecQT Android is an Android frontend for zec-qt-wallet that lets you send and receive shielded payments from your mobile phone. It is available on the Google Play Store or via direct download of the APK .","title":"Android Companion App"},{"location":"android/#run-zec-qt-wallet","text":"In order to let your Android phone connect to your desktop, you need to the deskop zec-qt-wallet . After your node is synced, go to Apps -> Connect Mobile App to view the connection QR Code, which you can scan from the Android App.","title":"Run zec-qt-wallet"},{"location":"android/#install-the-android-apk-directly","text":"If you\u2019re installing the APK directly, you\u2019ll need to allow Install from untrusted sources on your Android phone.","title":"Install the Android APK directly"},{"location":"android/#android-app-faq","text":"","title":"Android App FAQ"},{"location":"android/#what-is-a-direct-connection-vs-allow-connections-over-the-internet-via-zecqtwallet-wormhole","text":"When your phone and your desktop are on the same network (eg. on your home network), your phone can directly reach your desktop over your local network (if there are no firewalls blocking the connection). In this scenario, your phone directly communicates with your desktop zec-qt-wallet. This is the default. If your phone is on a different network (if you\u2019re connected via 4G/LTE, for example) or if your desktop zec-qt-wallet is behind a firewall, your phone can\u2019t directly reach your desktop. In this scenario, your phone and desktop both connect to a service run by zec-qt-wallet (called wormhole.zecqtwallet.com), which routes information between your phone and your desktop.","title":"What is a \"direct connection\" vs \"Allow connections over the internet via zecqtwallet wormhole\""},{"location":"android/#how-can-i-ensure-that-only-direct-connections-are-enabled","text":"This is already the default. If you want to connect over the internet via wormhole.zecqtwallet.com, you will need to opt-in by checking the Connect over internet via zec-qt-wallet wormhole checkbox on the connection page. You can also disable connecting over the internet via zec-qt-wallet wormhole in the Android app\u2019s settings.","title":"How can I ensure that only direct connections are enabled?"},{"location":"android/#what-data-can-the-wormhole-service-see","text":"All communication is encrypted end-to-end, so the wormhole service can\u2019t see the content of your messages. It can see some meta-data like the IP addresses and date/timestamps. Both your phone and your desktop connect to wormhole.zecqtwallet.com over HTTPS.","title":"What data can the wormhole service see?"},{"location":"android/#will-it-always-connect-via-the-wormhole-service","text":"The Android app will first attempt a direct connection each time you open the App. If a direct connection is not possible, it will then attempt to connect via wormhole (if enabled)","title":"Will it always connect via the wormhole service?"},{"location":"android/#how-can-i-connect-over-the-internet-without-using-the-wormhole-service","text":"You\u2019ll need to install a VPN on your home network, so you can VPN into your network from 4G/LTE networks, and then connect directly to your node. For example, you can use a service such as Pi VPN .","title":"How can I connect over the internet without using the wormhole service?"},{"location":"android/#currently-known-limitations","text":"After you download and install the APK, launch the program and scan the QR Code from your desktop to connect the two. Currently known limitations Old-style Sprout addresses are not supported You can\u2019t select which address to send from. zec-qt-wallet will try to send Transactions from a Sapling address, given you have enough balance You can\u2019t generate new z-addrs or t-addrs from the phone.","title":"Currently known limitations"},{"location":"android/#issues-or-feature-requests","text":"Please file all the feedback you can. You can file issues in the issues tab .","title":"Issues or feature requests"},{"location":"compile-from-source/","text":"Compiling from source \u00b6 Prerequisites \u00b6 To build zec-qt-wallet locally, you need to install Qt v5.11 or higher. You can get the latest opensource version from the Qt download site . Download and install the Qt version for your platform. During the installation, you should also select the build version for your platform/compiler. zec-qt-wallet is written in C++ 14, so you\u2019ll also need a modern C++ compiler like g++/clang++/visual c++ depending on your platform. Building on Linux \u00b6 First, install the pre-requisites sudo apt install libgl1-mesa-dev git clone https://github.com/ZcashFoundation/zec-qt-wallet.git cd zec-qt-wallet /path/to/qt5/bin/qmake zec-qt-wallet.pro CONFIG += debug make -j $( nproc ) ./zec-qt-wallet Building on Windows \u00b6 You need Visual Studio 2017 (The free C++ Community Edition works just fine). Alternately, you can cross-compile on Linux for Windows using the mingw compiler. See cross-compile instructions here . From the VS Tools command prompt: git clone https://github.com/ZcashFoundation/zec-qt-wallet.git cd zec-qt-wallet c: \\Q t5 \\b in \\q make.exe zec-qt-wallet.pro -spec win32-msvc CONFIG += debug nmake debug \\z ec-qt-wallet.exe To create the Visual Studio project files so you can compile and run from Visual Studio: c: \\Q t5 \\b in \\q make.exe zec-qt-wallet.pro -tp vc CONFIG += debug Building on Mac \u00b6 You need to install the Xcode app or the Xcode command line tools first, and then install Qt. git clone https://github.com/ZcashFoundation/zec-qt-wallet.git cd zec-qt-wallet /path/to/qt5/bin/qmake zec-qt-wallet.pro CONFIG += debug make ./zec-qt-wallet.app/Contents/MacOS/zec-qt-wallet","title":"Compiling from source"},{"location":"compile-from-source/#compiling-from-source","text":"","title":"Compiling from source"},{"location":"compile-from-source/#prerequisites","text":"To build zec-qt-wallet locally, you need to install Qt v5.11 or higher. You can get the latest opensource version from the Qt download site . Download and install the Qt version for your platform. During the installation, you should also select the build version for your platform/compiler. zec-qt-wallet is written in C++ 14, so you\u2019ll also need a modern C++ compiler like g++/clang++/visual c++ depending on your platform.","title":"Prerequisites"},{"location":"compile-from-source/#building-on-linux","text":"First, install the pre-requisites sudo apt install libgl1-mesa-dev git clone https://github.com/ZcashFoundation/zec-qt-wallet.git cd zec-qt-wallet /path/to/qt5/bin/qmake zec-qt-wallet.pro CONFIG += debug make -j $( nproc ) ./zec-qt-wallet","title":"Building on Linux"},{"location":"compile-from-source/#building-on-windows","text":"You need Visual Studio 2017 (The free C++ Community Edition works just fine). Alternately, you can cross-compile on Linux for Windows using the mingw compiler. See cross-compile instructions here . From the VS Tools command prompt: git clone https://github.com/ZcashFoundation/zec-qt-wallet.git cd zec-qt-wallet c: \\Q t5 \\b in \\q make.exe zec-qt-wallet.pro -spec win32-msvc CONFIG += debug nmake debug \\z ec-qt-wallet.exe To create the Visual Studio project files so you can compile and run from Visual Studio: c: \\Q t5 \\b in \\q make.exe zec-qt-wallet.pro -tp vc CONFIG += debug","title":"Building on Windows"},{"location":"compile-from-source/#building-on-mac","text":"You need to install the Xcode app or the Xcode command line tools first, and then install Qt. git clone https://github.com/ZcashFoundation/zec-qt-wallet.git cd zec-qt-wallet /path/to/qt5/bin/qmake zec-qt-wallet.pro CONFIG += debug make ./zec-qt-wallet.app/Contents/MacOS/zec-qt-wallet","title":"Building on Mac"},{"location":"faq/","text":"FAQ \u00b6 Installation \u00b6 Where do I download the software? \u00b6 zec-qt-wallet is available to download from the Zcash Foundation Github repository . The releases page lists the latest available downloads for each platform. The Android application, which is still in beta, may be downloaded from here . Which version should I download? \u00b6 See the installation section for more details specific for your platform. How do I verify the download file? \u00b6 Starting from v0.5.10 all zec-qt-wallet releases are signed. You may download the detached signatures on the releases page and verify that the software was signed with the published public key . In addition, each release contains SHA256 checksums that may additionally be verified. For more information, see the Verifying the download section of the Installation guide . Blockchain \u00b6 Is zec-qt-wallet a light client? \u00b6 No, zec-qt-wallet requires a full zcashd node to operate. A light client protocol is currently in development that would substantially reduce the storage and bandwidth requirements for a light wallet. Currently, to use shielded transactions, you need to run a full node. How large is the blockchain? \u00b6 Currently, the blockchain data directory is around 22GB (Feb 2019) and will continue to grow with time. Can I change the location of the data directory? \u00b6 If you are starting zec-qt-wallet for the first time, then you can choose the Advanced Config option and select the desired location of your data directory, which may, for example, be on a separate disk. If you have an existing data directory you would like to move, you can achieve this through the following steps, with zec-qt-wallet closed: Create the new directory Move everything in your existing data directory to the new location with the exception of zcash.conf which must remain in the original data directory location. Update zcash.conf to add the line datadir=/your/new/path specifying the path to the newly created folder Restart zec-qt-wallet Can I move the params directory? \u00b6 No, unlike the data directory there is no configurable option to specify the params directory and zcashd expects the params directory to be in the following locations: Windows: %HOMEPATH%\\AppData\\Roaming\\ZcashParams macOS: ~/Library/Application Support/ZcashParams Linux: ~/.zcash-params The folder should contain the following files and all are (currently) required for zcashd to function. 3.5M sapling-output.params 46M sapling-spend.params 692M sprout-groth16.params 869M sprout-proving.key 1.5K sprout-verifying.key As a workaround, you can use any filesystem operations for your OS, e.g. creating a symlink of the directory but these are unsupported. Transactions \u00b6 Can I use funds with zero confirmations? \u00b6 No, Zcash requires that you have at least 1 confirmation before sending. Trying to spend unconfirmed funds will result in an error . Can I use a custom fee? \u00b6 Yes, though it is advised to use the default 0.0001 fee to prevent your transactions from being distinguishable, you may override this behaviour in the app Options . What\u2019s the difference between Transparent, Sprout and Sapling addresses? \u00b6 Transparent addresses start with a t prefix and are transparent like Bitcoin and offer no privacy properties. Sprout addresses have a zc prefix and are the first generation of shielded addresses. Sprout addresses have been superseded by Sapling addresses which have a zs prefix. While Sprout addresses may still be used, it is recommended to use Sapling addresses due to the performance improvements and updated system parameters. To move funds between Sprout and Sapling addresses see the turnstile migration documentation . For more detailed information on the types of addresses in Zcash see this page . Note that on testnet, transparent addresses have a prefix tm , Sprout have a zt prefix and Sapling ztestsapling . How long does a Sapling transaction take? \u00b6 Sapling greatly reduced the time taken to perform shielded proofs down to just a few seconds though this value does depend on hardware and the number of shielded inputs/outputs. Sending from a transparent address to a Sapling one is typically completed in under 0.5 seconds. Legacy Sprout transactions take in the order of 70-90 seconds but this is also dependent on hardware and the number of JoinSplits. For more information see this post . zcashd node \u00b6 Where is the default data directory on each platform? \u00b6 By default, the location of the data directory, which stores the wallet, zcash.conf and all blockchain data, is found in the following locations. It is possible to move this data directory . Windows: %HOMEPATH%\\AppData\\Roaming\\Zcash macOS: ~/Library/Application Support/Zcash Linux: ~/.zcash Where is zcash.conf located? \u00b6 zcash.conf is located in the default data directory and will be in this location even if the datadir parameter has been set to a custom value. Can I use zec-qt-wallet with an external node? \u00b6 Yes, see this section for how to connect to an external zcashd . How do I find the version of zcashd that I am running? \u00b6 To find the version of zcashd you are running simply hover over the blockchain data in the lower right-hand corner and a popup will appear with the zcashd version string: Does zec-qt-wallet work on testnet? \u00b6 Yes, zec-qt-wallet will work on testnet. To do so add the following lines to your zcash.conf file, replacing the existing values if present: addnode = testnet.z.cash testnet = 1 Does zec-qt-wallet support payment disclosure? \u00b6 Not yet. While payment disclosure works on Sprout addresses, zcashd has not yet been updated to support Sapling. There is a plan to support this once implemented by zcashd . Does zec-qt-wallet support viewing keys? \u00b6 Not yet, as zcashd doesn\u2019t currently support Sapling viewing keys and will be implemented in zec-qt-wallet once supported. Wallet \u00b6 Is the wallet encrypted? \u00b6 No, wallet encryption is currently disabled by zcashd . You should use full-disk encryption (or encryption of your home directory) to protect your wallet.dat file at rest, and should assume (even unprivileged) users who are running on your OS can read your wallet.dat file. Why does my change go to a new address? \u00b6 Like Bitcoin when using transparent addresses, change from a transaction goes to a new transparent address. zec-qt-wallet allows you to set an option to automatically send this change to a Sapling address via the application Options . As the \u2018feature\u2019 was added in Bitcoin as a measure to preserve privacy and prevent trivial linking of transactions on the blockchain, shielded (z) addresses do not have this property and any change is returned to the sending (z) address by default. Will zec-qt wallet remember my outgoing shielded sends? \u00b6 Yes, by default zec-qt-wallet will store shielded sends locally as zcashd does not provide this information. You can override this behaviour via the Options setting and you can remove any stored transactions at any time by choosing the Clear History button (note that these will not be later recoverable if you delete them). How do I read a memo? \u00b6 If there is a memo attached to a transaction then it will be visible by a message icon in the transaction listing. Simply right-click the transaction and choose View Memo to read its encrypted contents. Can I use zec-qt-wallet with a hardware wallet? \u00b6 No, this is currently not supported. Can I remove an address from the wallet? \u00b6 No, addresses cannot be removed from the wallet. It is advised that you export the private keys for addresses you are interested in and then delete the wallet.dat file. You can then import the private keys you require in a fresh, empty wallet. Seed phrases \u00b6 Can I import private keys from a recovery phrase / BIP39 Mnemonic? \u00b6 No, zec-qt-wallet cannot import private keys from a recovery phrase directly. To do so you will need to extract your private keys from the recovery phrase. You can use a tool such as https://iancoleman.io/bip39/ entering the BIP39 Mnemonic (your recovery phrase) and choosing Zcash as the coin. Once you have entered these values look for the section entitled Derived Addresses which will list all the derived addresses and private keys for those addresses. You will need to import the private keys for any transparent addresses where you have funds, remembering that change in transparent addresses goes to a new address . Be very careful with your recovery seed Access to your recovery seed allows anyone to steal all of your Zcash. Though the tool listed above runs locally in your browser and is fully open source, you can always save the HTML file and run on an airgapped offline device for extra security. Can I export a BIP39 seed phrase? \u00b6 No, this is not supported. Can I export the Sapling HD seed? \u00b6 Sapling does implement a HD wallet however at present the only way to extract this is to perform the z_exportwallet command via zcashd and is unsupported in zec-qt-wallet due to needing to write to an export directory. To extract the Sapling HD seed you need to run zcash-cli z_exportwallet after specifying an exportdir in zcash.conf . See these instructions for more details on working with the Zcash RPC CLI. Can I import the Sapling HD seed? \u00b6 Not at present, however, this feature will be added when supported by zcashd . Can I mine with zec-qt-wallet? \u00b6 No, zec-qt-wallet is a wallet and full node. While you can configure zcashd to run the inbuilt CPU miner this isn\u2019t practical to run on mainnet and you need alternative hardware and software to run. See this page for more information on mining. WinZEC \u00b6 How do I upgrade from WinZEC / zcash4mac / zcash4win? \u00b6 WinZEC and its predecessor zcash4win (and zcash4mac) have now been deprecated. You can simply install zec-qt-wallet and it\u2019ll use the existing data directory and wallet from any previous installation and operate as normal. Can I import the WinZEC address book? \u00b6 Yes, in the address book click to Import Address Book and browse to the location of the WinZEC address book file. By default this will be %HOMEPATH%\\AppData\\Local\\ZcashSwingWalletUI\\addressBook.csv where %/HOMEPATH% is typically C:\\Users\\username\\ and you may need to enable viewing hidden files to browse to the AppData folder location. In what languages is zec-qt-wallet available? \u00b6 Currently, it is available in French, Spanish, Italian and Portuguese. If you want to help by translating see the Translating zec-qt-wallet page.","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#installation","text":"","title":"Installation"},{"location":"faq/#where-do-i-download-the-software","text":"zec-qt-wallet is available to download from the Zcash Foundation Github repository . The releases page lists the latest available downloads for each platform. The Android application, which is still in beta, may be downloaded from here .","title":"Where do I download the software?"},{"location":"faq/#which-version-should-i-download","text":"See the installation section for more details specific for your platform.","title":"Which version should I download?"},{"location":"faq/#how-do-i-verify-the-download-file","text":"Starting from v0.5.10 all zec-qt-wallet releases are signed. You may download the detached signatures on the releases page and verify that the software was signed with the published public key . In addition, each release contains SHA256 checksums that may additionally be verified. For more information, see the Verifying the download section of the Installation guide .","title":"How do I verify the download file?"},{"location":"faq/#blockchain","text":"","title":"Blockchain"},{"location":"faq/#is-zec-qt-wallet-a-light-client","text":"No, zec-qt-wallet requires a full zcashd node to operate. A light client protocol is currently in development that would substantially reduce the storage and bandwidth requirements for a light wallet. Currently, to use shielded transactions, you need to run a full node.","title":"Is zec-qt-wallet a light client?"},{"location":"faq/#how-large-is-the-blockchain","text":"Currently, the blockchain data directory is around 22GB (Feb 2019) and will continue to grow with time.","title":"How large is the blockchain?"},{"location":"faq/#can-i-change-the-location-of-the-data-directory","text":"If you are starting zec-qt-wallet for the first time, then you can choose the Advanced Config option and select the desired location of your data directory, which may, for example, be on a separate disk. If you have an existing data directory you would like to move, you can achieve this through the following steps, with zec-qt-wallet closed: Create the new directory Move everything in your existing data directory to the new location with the exception of zcash.conf which must remain in the original data directory location. Update zcash.conf to add the line datadir=/your/new/path specifying the path to the newly created folder Restart zec-qt-wallet","title":"Can I change the location of the data directory?"},{"location":"faq/#can-i-move-the-params-directory","text":"No, unlike the data directory there is no configurable option to specify the params directory and zcashd expects the params directory to be in the following locations: Windows: %HOMEPATH%\\AppData\\Roaming\\ZcashParams macOS: ~/Library/Application Support/ZcashParams Linux: ~/.zcash-params The folder should contain the following files and all are (currently) required for zcashd to function. 3.5M sapling-output.params 46M sapling-spend.params 692M sprout-groth16.params 869M sprout-proving.key 1.5K sprout-verifying.key As a workaround, you can use any filesystem operations for your OS, e.g. creating a symlink of the directory but these are unsupported.","title":"Can I move the params directory?"},{"location":"faq/#transactions","text":"","title":"Transactions"},{"location":"faq/#can-i-use-funds-with-zero-confirmations","text":"No, Zcash requires that you have at least 1 confirmation before sending. Trying to spend unconfirmed funds will result in an error .","title":"Can I use funds with zero confirmations?"},{"location":"faq/#can-i-use-a-custom-fee","text":"Yes, though it is advised to use the default 0.0001 fee to prevent your transactions from being distinguishable, you may override this behaviour in the app Options .","title":"Can I use a custom fee?"},{"location":"faq/#whats-the-difference-between-transparent-sprout-and-sapling-addresses","text":"Transparent addresses start with a t prefix and are transparent like Bitcoin and offer no privacy properties. Sprout addresses have a zc prefix and are the first generation of shielded addresses. Sprout addresses have been superseded by Sapling addresses which have a zs prefix. While Sprout addresses may still be used, it is recommended to use Sapling addresses due to the performance improvements and updated system parameters. To move funds between Sprout and Sapling addresses see the turnstile migration documentation . For more detailed information on the types of addresses in Zcash see this page . Note that on testnet, transparent addresses have a prefix tm , Sprout have a zt prefix and Sapling ztestsapling .","title":"What's the difference between Transparent, Sprout and Sapling addresses?"},{"location":"faq/#how-long-does-a-sapling-transaction-take","text":"Sapling greatly reduced the time taken to perform shielded proofs down to just a few seconds though this value does depend on hardware and the number of shielded inputs/outputs. Sending from a transparent address to a Sapling one is typically completed in under 0.5 seconds. Legacy Sprout transactions take in the order of 70-90 seconds but this is also dependent on hardware and the number of JoinSplits. For more information see this post .","title":"How long does a Sapling transaction take?"},{"location":"faq/#zcashd-node","text":"","title":"zcashd node"},{"location":"faq/#where-is-the-default-data-directory-on-each-platform","text":"By default, the location of the data directory, which stores the wallet, zcash.conf and all blockchain data, is found in the following locations. It is possible to move this data directory . Windows: %HOMEPATH%\\AppData\\Roaming\\Zcash macOS: ~/Library/Application Support/Zcash Linux: ~/.zcash","title":"Where is the default data directory on each platform?"},{"location":"faq/#where-is-zcashconf-located","text":"zcash.conf is located in the default data directory and will be in this location even if the datadir parameter has been set to a custom value.","title":"Where is zcash.conf located?"},{"location":"faq/#can-i-use-zec-qt-wallet-with-an-external-node","text":"Yes, see this section for how to connect to an external zcashd .","title":"Can I use zec-qt-wallet with an external node?"},{"location":"faq/#how-do-i-find-the-version-of-zcashd-that-i-am-running","text":"To find the version of zcashd you are running simply hover over the blockchain data in the lower right-hand corner and a popup will appear with the zcashd version string:","title":"How do I find the version of zcashd that I am running?"},{"location":"faq/#does-zec-qt-wallet-work-on-testnet","text":"Yes, zec-qt-wallet will work on testnet. To do so add the following lines to your zcash.conf file, replacing the existing values if present: addnode = testnet.z.cash testnet = 1","title":"Does zec-qt-wallet work on testnet?"},{"location":"faq/#does-zec-qt-wallet-support-payment-disclosure","text":"Not yet. While payment disclosure works on Sprout addresses, zcashd has not yet been updated to support Sapling. There is a plan to support this once implemented by zcashd .","title":"Does zec-qt-wallet support payment disclosure?"},{"location":"faq/#does-zec-qt-wallet-support-viewing-keys","text":"Not yet, as zcashd doesn\u2019t currently support Sapling viewing keys and will be implemented in zec-qt-wallet once supported.","title":"Does zec-qt-wallet support viewing keys?"},{"location":"faq/#wallet","text":"","title":"Wallet"},{"location":"faq/#is-the-wallet-encrypted","text":"No, wallet encryption is currently disabled by zcashd . You should use full-disk encryption (or encryption of your home directory) to protect your wallet.dat file at rest, and should assume (even unprivileged) users who are running on your OS can read your wallet.dat file.","title":"Is the wallet encrypted?"},{"location":"faq/#why-does-my-change-go-to-a-new-address","text":"Like Bitcoin when using transparent addresses, change from a transaction goes to a new transparent address. zec-qt-wallet allows you to set an option to automatically send this change to a Sapling address via the application Options . As the \u2018feature\u2019 was added in Bitcoin as a measure to preserve privacy and prevent trivial linking of transactions on the blockchain, shielded (z) addresses do not have this property and any change is returned to the sending (z) address by default.","title":"Why does my change go to a new address?"},{"location":"faq/#will-zec-qt-wallet-remember-my-outgoing-shielded-sends","text":"Yes, by default zec-qt-wallet will store shielded sends locally as zcashd does not provide this information. You can override this behaviour via the Options setting and you can remove any stored transactions at any time by choosing the Clear History button (note that these will not be later recoverable if you delete them).","title":"Will zec-qt wallet remember my outgoing shielded sends?"},{"location":"faq/#how-do-i-read-a-memo","text":"If there is a memo attached to a transaction then it will be visible by a message icon in the transaction listing. Simply right-click the transaction and choose View Memo to read its encrypted contents.","title":"How do I read a memo?"},{"location":"faq/#can-i-use-zec-qt-wallet-with-a-hardware-wallet","text":"No, this is currently not supported.","title":"Can I use zec-qt-wallet with a hardware wallet?"},{"location":"faq/#can-i-remove-an-address-from-the-wallet","text":"No, addresses cannot be removed from the wallet. It is advised that you export the private keys for addresses you are interested in and then delete the wallet.dat file. You can then import the private keys you require in a fresh, empty wallet.","title":"Can I remove an address from the wallet?"},{"location":"faq/#seed-phrases","text":"","title":"Seed phrases"},{"location":"faq/#can-i-import-private-keys-from-a-recovery-phrase-bip39-mnemonic","text":"No, zec-qt-wallet cannot import private keys from a recovery phrase directly. To do so you will need to extract your private keys from the recovery phrase. You can use a tool such as https://iancoleman.io/bip39/ entering the BIP39 Mnemonic (your recovery phrase) and choosing Zcash as the coin. Once you have entered these values look for the section entitled Derived Addresses which will list all the derived addresses and private keys for those addresses. You will need to import the private keys for any transparent addresses where you have funds, remembering that change in transparent addresses goes to a new address . Be very careful with your recovery seed Access to your recovery seed allows anyone to steal all of your Zcash. Though the tool listed above runs locally in your browser and is fully open source, you can always save the HTML file and run on an airgapped offline device for extra security.","title":"Can I import private keys from a recovery phrase / BIP39 Mnemonic?"},{"location":"faq/#can-i-export-a-bip39-seed-phrase","text":"No, this is not supported.","title":"Can I export a BIP39 seed phrase?"},{"location":"faq/#can-i-export-the-sapling-hd-seed","text":"Sapling does implement a HD wallet however at present the only way to extract this is to perform the z_exportwallet command via zcashd and is unsupported in zec-qt-wallet due to needing to write to an export directory. To extract the Sapling HD seed you need to run zcash-cli z_exportwallet after specifying an exportdir in zcash.conf . See these instructions for more details on working with the Zcash RPC CLI.","title":"Can I export the Sapling HD seed?"},{"location":"faq/#can-i-import-the-sapling-hd-seed","text":"Not at present, however, this feature will be added when supported by zcashd .","title":"Can I import the Sapling HD seed?"},{"location":"faq/#can-i-mine-with-zec-qt-wallet","text":"No, zec-qt-wallet is a wallet and full node. While you can configure zcashd to run the inbuilt CPU miner this isn\u2019t practical to run on mainnet and you need alternative hardware and software to run. See this page for more information on mining.","title":"Can I mine with zec-qt-wallet?"},{"location":"faq/#winzec","text":"","title":"WinZEC"},{"location":"faq/#how-do-i-upgrade-from-winzec-zcash4mac-zcash4win","text":"WinZEC and its predecessor zcash4win (and zcash4mac) have now been deprecated. You can simply install zec-qt-wallet and it\u2019ll use the existing data directory and wallet from any previous installation and operate as normal.","title":"How do I upgrade from WinZEC / zcash4mac / zcash4win?"},{"location":"faq/#can-i-import-the-winzec-address-book","text":"Yes, in the address book click to Import Address Book and browse to the location of the WinZEC address book file. By default this will be %HOMEPATH%\\AppData\\Local\\ZcashSwingWalletUI\\addressBook.csv where %/HOMEPATH% is typically C:\\Users\\username\\ and you may need to enable viewing hidden files to browse to the AppData folder location.","title":"Can I import the WinZEC address book?"},{"location":"faq/#in-what-languages-is-zec-qt-wallet-available","text":"Currently, it is available in French, Spanish, Italian and Portuguese. If you want to help by translating see the Translating zec-qt-wallet page.","title":"In what languages is zec-qt-wallet available?"},{"location":"installation/","text":"Installing zec-qt-wallet \u00b6 Download and Install \u00b6 zec-qt-wallet runs on Windows, macOS and Linux and is available to download from the releases page of the project Github repository . Follow the instructions below for the platform of your choice to install zec-qt-wallet. To compile from source see this section . Windows instructions (click to expand) Download and run the .msi installer (named Windows-installer-zec-qt-wallet-v0.6.0.msi ) and follow the prompts. Alternately, you can download the release binary (named Windows-binaries-zec-qt-wallet-v0.6.0.zip ), unzip it and double click on zec-qt-wallet to start. macOS instructions (click to expand) Download the macOS release named macOS-zec-qt-wallet-v0.6.0.dmg and double-click on the .dmg file to open it, and drag zec-qt-wallet on to the Applications link to install. You will need to give authorisation for the program to run. Linux instructions (click to expand) If you are on Debian/Ubuntu, download the .deb package and install it. sudo dpkg -i linux-deb-zec-qt-wallet-v0.6.0.deb sudo apt install -f Or you can download and run the binaries directly. tar -xvf zec-qt-wallet-v0.6.0.tar.gz ./zec-qt-wallet-v0.6.0/zec-qt-wallet Verifying the download \u00b6 Starting from v0.5.10 all zec-qt-wallet releases are signed and contain checksums that may be validated to ensure the integrity of the downloaded software. The current signatures and checksums are available to download via the signatures-v0.6.0.tar.gz file on the releases page . Signatures \u00b6 Import public key \u00b6 The public key is available to download from the GitHub repository . Save the file and import via: gpg --import public_key.asc The public key fingerprint is C231 72D0 C956 9591 ECEC 8ECB 0E1E 9027 9521 EBB4 Alternatively, you can import from a keyserver using the following command: gpg --keyserver pool.sks-keyservers.net --recv-keys 0E1E90279521EBB4 Verifying signatures \u00b6 Once the key has been imported, you can run the following command to verify the signature: gpg --verify <filename.sig> <downloaded-filename-to-verify> Assuming a good signature, you will see a similar output to the below. gpg --verify macOS-zec-qt-wallet-v0.6.0.dmg.sig macOS-zec-qt-wallet-v0.6.0.dmg gpg: Signature made Wed 20 Feb 11:06:04 2019 PST gpg: using RSA key C23172D0C9569591ECEC8ECB0E1E90279521EBB4 gpg: Good signature from \"adityapk00 (PGP Key for zec-qt-wallet) <zcash@adityapk.com>\" [full] Checksums \u00b6 The file sha256sum-v0.6.0.txt contains the SHA256 checksums for each download. You can verify that the file you downloaded matches this checksum via the following command: sha256sum macOS-zec-qt-wallet-v0.6.0.dmg ccbab463063e7c310a1a3579d17995ea00cd494ab9637a8205a0e46f752fac25 macOS-zec-qt-wallet-v0.6.0.dmg zcashd \u00b6 zec-qt-wallet needs a Zcash node running zcashd . If you already have a zcashd node running, zec-qt-wallet will connect to it. If you don\u2019t have one running, zec-qt-wallet will start its embedded zcashd node. Additionally, if this is the first time you\u2019re running zec-qt-wallet or a zcashd daemon, zec-qt-wallet will download the Zcash params (~1.7 GB) and configure zcash.conf for you. Disable embedded zcashd To force disabling the embedded zcashd and only connect to a remote node pass --no-embedded to the startup command. System requirements \u00b6 If using the embedded zcashd the recommended system requirements are 5GB of free RAM and 25GB of free disk (the size of the blockchain increases over time). Compiling from source \u00b6 zec-qt-wallet is written in C++ 14, and can be compiled with g++/clang++/visual c++. It also depends on Qt5, which you can get from here . Note that if you are compiling from source, you won\u2019t get the embedded zcashd by default. You can either run an external zcashd , or compile zcashd as well. See the instructions for setting up a build environment and detailed build instructions for each platform here . Upgrading \u00b6 It is important to keep your version of zec-qt-wallet up to date as new features are regularly added and bugs fixed. To download follow the instructions to install as your data directory and wallet will be untouched throughout. zcashd reaches end of service halt after 16 weeks If you are using the embedded zcashd then after 16 weeks from release zcashd will reach an end of service halt and will shut down. Simply update your version of zec-qt-wallet to continue as it will contain updated releases of zcashd . zec-qt-wallet also has an update notifier that will notify you if there\u2019s a new release of zec-qt-wallet available.","title":"Installing on Windows, Mac and Linux"},{"location":"installation/#installing-zec-qt-wallet","text":"","title":"Installing zec-qt-wallet"},{"location":"installation/#download-and-install","text":"zec-qt-wallet runs on Windows, macOS and Linux and is available to download from the releases page of the project Github repository . Follow the instructions below for the platform of your choice to install zec-qt-wallet. To compile from source see this section . Windows instructions (click to expand) Download and run the .msi installer (named Windows-installer-zec-qt-wallet-v0.6.0.msi ) and follow the prompts. Alternately, you can download the release binary (named Windows-binaries-zec-qt-wallet-v0.6.0.zip ), unzip it and double click on zec-qt-wallet to start. macOS instructions (click to expand) Download the macOS release named macOS-zec-qt-wallet-v0.6.0.dmg and double-click on the .dmg file to open it, and drag zec-qt-wallet on to the Applications link to install. You will need to give authorisation for the program to run. Linux instructions (click to expand) If you are on Debian/Ubuntu, download the .deb package and install it. sudo dpkg -i linux-deb-zec-qt-wallet-v0.6.0.deb sudo apt install -f Or you can download and run the binaries directly. tar -xvf zec-qt-wallet-v0.6.0.tar.gz ./zec-qt-wallet-v0.6.0/zec-qt-wallet","title":"Download and Install"},{"location":"installation/#verifying-the-download","text":"Starting from v0.5.10 all zec-qt-wallet releases are signed and contain checksums that may be validated to ensure the integrity of the downloaded software. The current signatures and checksums are available to download via the signatures-v0.6.0.tar.gz file on the releases page .","title":"Verifying the download"},{"location":"installation/#signatures","text":"","title":"Signatures"},{"location":"installation/#import-public-key","text":"The public key is available to download from the GitHub repository . Save the file and import via: gpg --import public_key.asc The public key fingerprint is C231 72D0 C956 9591 ECEC 8ECB 0E1E 9027 9521 EBB4 Alternatively, you can import from a keyserver using the following command: gpg --keyserver pool.sks-keyservers.net --recv-keys 0E1E90279521EBB4","title":"Import public key"},{"location":"installation/#verifying-signatures","text":"Once the key has been imported, you can run the following command to verify the signature: gpg --verify <filename.sig> <downloaded-filename-to-verify> Assuming a good signature, you will see a similar output to the below. gpg --verify macOS-zec-qt-wallet-v0.6.0.dmg.sig macOS-zec-qt-wallet-v0.6.0.dmg gpg: Signature made Wed 20 Feb 11:06:04 2019 PST gpg: using RSA key C23172D0C9569591ECEC8ECB0E1E90279521EBB4 gpg: Good signature from \"adityapk00 (PGP Key for zec-qt-wallet) <zcash@adityapk.com>\" [full]","title":"Verifying signatures"},{"location":"installation/#checksums","text":"The file sha256sum-v0.6.0.txt contains the SHA256 checksums for each download. You can verify that the file you downloaded matches this checksum via the following command: sha256sum macOS-zec-qt-wallet-v0.6.0.dmg ccbab463063e7c310a1a3579d17995ea00cd494ab9637a8205a0e46f752fac25 macOS-zec-qt-wallet-v0.6.0.dmg","title":"Checksums"},{"location":"installation/#zcashd","text":"zec-qt-wallet needs a Zcash node running zcashd . If you already have a zcashd node running, zec-qt-wallet will connect to it. If you don\u2019t have one running, zec-qt-wallet will start its embedded zcashd node. Additionally, if this is the first time you\u2019re running zec-qt-wallet or a zcashd daemon, zec-qt-wallet will download the Zcash params (~1.7 GB) and configure zcash.conf for you. Disable embedded zcashd To force disabling the embedded zcashd and only connect to a remote node pass --no-embedded to the startup command.","title":"zcashd"},{"location":"installation/#system-requirements","text":"If using the embedded zcashd the recommended system requirements are 5GB of free RAM and 25GB of free disk (the size of the blockchain increases over time).","title":"System requirements"},{"location":"installation/#compiling-from-source","text":"zec-qt-wallet is written in C++ 14, and can be compiled with g++/clang++/visual c++. It also depends on Qt5, which you can get from here . Note that if you are compiling from source, you won\u2019t get the embedded zcashd by default. You can either run an external zcashd , or compile zcashd as well. See the instructions for setting up a build environment and detailed build instructions for each platform here .","title":"Compiling from source"},{"location":"installation/#upgrading","text":"It is important to keep your version of zec-qt-wallet up to date as new features are regularly added and bugs fixed. To download follow the instructions to install as your data directory and wallet will be untouched throughout. zcashd reaches end of service halt after 16 weeks If you are using the embedded zcashd then after 16 weeks from release zcashd will reach an end of service halt and will shut down. Simply update your version of zec-qt-wallet to continue as it will contain updated releases of zcashd . zec-qt-wallet also has an update notifier that will notify you if there\u2019s a new release of zec-qt-wallet available.","title":"Upgrading"},{"location":"privacypolicy/","text":"ZecQT Android Companion App Privacy Policy \u00b6 Your privacy is important to us. It is zcash-qt-wallet\u2019s policy to completely respect your privacy regarding any information. zec-qt-wallet doesn\u2019t collect any personal information and neither do we store any personal information. We do collect some metadata, like your wormhole key, and only when we truly need it to provide a service to you. We collect it by fair and lawful means, with your knowledge and consent. We also let you know why we are collecting it and how it will be used. We only retain collected information for as long as necessary to provide you with your requested service. What data we store, we\u2019ll protect within commercially acceptable means to prevent loss and theft, as well as unauthorised access, disclosure, copying, use or modification. We don\u2019t share any personally identifying information publicly or with third-parties, except when required to by law. Our website may link to external sites that are not operated by us. Please be aware that we have no control over the content and practices of these sites, and cannot accept responsibility or liability for their respective privacy policies. You are free to refuse our request for your personal information, with the understanding that we may be unable to provide you with some of your desired services. You may also opt-out of using the wormhole service entirely on the settings page. Your continued use of our website will be regarded as acceptance of our practices around privacy and personal information. If you have any questions about how we handle user data and personal information, feel free to contact us. This policy is effective as of 1 February 2019.","title":"Privacy Policy"},{"location":"privacypolicy/#zecqt-android-companion-app-privacy-policy","text":"Your privacy is important to us. It is zcash-qt-wallet\u2019s policy to completely respect your privacy regarding any information. zec-qt-wallet doesn\u2019t collect any personal information and neither do we store any personal information. We do collect some metadata, like your wormhole key, and only when we truly need it to provide a service to you. We collect it by fair and lawful means, with your knowledge and consent. We also let you know why we are collecting it and how it will be used. We only retain collected information for as long as necessary to provide you with your requested service. What data we store, we\u2019ll protect within commercially acceptable means to prevent loss and theft, as well as unauthorised access, disclosure, copying, use or modification. We don\u2019t share any personally identifying information publicly or with third-parties, except when required to by law. Our website may link to external sites that are not operated by us. Please be aware that we have no control over the content and practices of these sites, and cannot accept responsibility or liability for their respective privacy policies. You are free to refuse our request for your personal information, with the understanding that we may be unable to provide you with some of your desired services. You may also opt-out of using the wormhole service entirely on the settings page. Your continued use of our website will be regarded as acceptance of our practices around privacy and personal information. If you have any questions about how we handle user data and personal information, feel free to contact us. This policy is effective as of 1 February 2019.","title":"ZecQT Android Companion App Privacy Policy"},{"location":"setting-up-build-env/","text":"Setting up a build environment \u00b6 Linux \u00b6 Pre-requisites \u00b6 It is best to set up a build environment on Ubuntu 16.04. It brings the right versions of libc and libstdc++ that ensures maximum compatibility. You can build on newer versions of Linux distros, but binaries compiled on these platforms may not work on older versions. # build dependencies sudo apt install clang g++ build-essential make mingw-w64 git pkg-config libc6-dev m4 g++-multilib autoconf libtool-bin ncurses-dev unzip python python-zmq zlib1g-dev wget curl bsdmainutils automake libgl1-mesa-dev libglu1-mesa-dev libfontconfig1-dev autopoint libssl-dev # MXE dependencies sudo apt install bash bison bzip2 flex gettext git gperf intltool libc6-dev-i386 libgdk-pixbuf2.0-dev libltdl-dev libtool-bin libxml-parser-perl make openssl p7zip-full patch perl pkg-config python ruby sed unzip wget xz-utils Compile OpenSSL \u00b6 You need to compile a static version of OpenSSL, which is passed to the Qt5 configuration script. # Download openssl 1.0.2 ./Configure linux-x86_64 make Static build of Qt5 \u00b6 Download Qt5 sources mkdir -p ~/Qt/5.11.2 && cd ~/Qt/5.11.2 wget https://download.qt.io/archive/qt/5.11/5.11.2/single/qt-everywhere-src-5.11.2.tar.xz tar xvf qt-everywhere-src-5.11.2.tar.xz && cd qt-everywhere-src-5.11.2 Configure and build Qt5 statically. OPENSSL_LIBS = '-L/path/to/openssl-1.0.2q -lssl -lcrypto' ./configure -static -prefix ~/Qt/5.11.2/static -skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin -nomake examples -nomake tests -qt-zlib -qt-libpng -qt-xcb -qt-xkbcommon -feature-fontconfig -no-feature-getentropy -release -openssl-linked -opensource make -j $( nproc ) make -j $( nproc ) install Build MXE (Cross-compiled Qt5 for Windows in Linux) \u00b6 mkdir ~/github && cd ~/github git clone https://github.com/mxe/mxe.git cd mxe make -j $( nproc ) MXE_TARGETS = x86_64-w64-mingw32.static qtbase qtwebsockets Build zec-qt-wallet \u00b6 git clone git@github.com:ZcashFoundation/zec-qt-wallet.git ~/Qt/5.11.2/static/bin/qmake zec-qt-wallet.pro CONFIG += debug-spec linux-clang make -j $( nproc ) Compiling zcashd for embedded zcashd \u00b6 Compile embedded zcashd from adityapk00/zcashd The zcashd compilation is specific to adityapk00/zcashd as there are some custom patches for new RPC calls that help with the embedding of zcashd that are not included in the upstream zcash/zcash repository. git clone git@github.com:adityapk00/zcash zcash-linux git clone git@github.com:adityapk00/zcash zcash-win mkdir -p ~/zcash/artifacts # Built zcashd goes here. Note that we create two separate folders because we\u2019re going to compile zcashd for Windows and Linux. Build zcashd windows cd zcash-win ./mkreleasewin.sh Build zcashd Linux cd zcash-linux ./mkreleaselinux.sh Setup Environment \u00b6 Add the following paths to your ~/.bashrc . Remember to add it at the very top, before the interactivity check, because we need these variables even in an ssh shell. export QT_STATIC = ~/Qt/5.11.2/static/ export MXE_PATH = ~/github/mxe/usr/bin/ export ZCASH_DIR = ~/github/zcash Make release build \u00b6 PREV_VERSION = 0 .2.5 APP_VERSION = 0 .2.6 src/scripts/mkrelease.sh This will put all the Windows and Linux compiled binaries into the artifacts folder macOS \u00b6 Install Xcode or Xcode Command Line Tools, and then install Qt 5.11. From a terminal: cd ~/github/zec-qt-wallet/ APP_VERSION = 0 .3.0 src/scripts/mkmacdmg.sh This will build the app and package it into a dmg and place it in the artifacts/ folder Building zcashd \u00b6 git clone git@github.com:adityapk00/zcash cd zcash ./zcutil/build.sh -j $( nproc ) Windows \u00b6 Even though zec-qt-wallet for Windows is cross-compiled on Linux, we still need a Windows machine to build the installer. The Windows installer is built using WiX toolset. Install WiX toolset 3.11.1 from here . After installation, add the directory to the system path (both candle.exe and light.exe are runnable) To build the installer, in Powershell, run: APP_VERSION = 0 .3.0 src/scripts/mkwininstaller.ps1 Running the unified build \u00b6 After all these 3 machines have been set up, we can build all the release artifacts (Windows, Linux, macOS binaries and installers) with one command, triggered from the Windows machine. (Replace u1604 and macmini with names of the Linux and macOS machines respectively) cd ~/github/zec-qt-wallet . \\s rc \\s cripts \\d obuild.ps1 -version 0 .4.1 -prev 0 .4.0 -server u1604 -macserver macmini This will build all three platforms and their installers, and place everything in the artifacts folder on the Windows machine.","title":"Setting up a build environment"},{"location":"setting-up-build-env/#setting-up-a-build-environment","text":"","title":"Setting up a build environment"},{"location":"setting-up-build-env/#linux","text":"","title":"Linux"},{"location":"setting-up-build-env/#pre-requisites","text":"It is best to set up a build environment on Ubuntu 16.04. It brings the right versions of libc and libstdc++ that ensures maximum compatibility. You can build on newer versions of Linux distros, but binaries compiled on these platforms may not work on older versions. # build dependencies sudo apt install clang g++ build-essential make mingw-w64 git pkg-config libc6-dev m4 g++-multilib autoconf libtool-bin ncurses-dev unzip python python-zmq zlib1g-dev wget curl bsdmainutils automake libgl1-mesa-dev libglu1-mesa-dev libfontconfig1-dev autopoint libssl-dev # MXE dependencies sudo apt install bash bison bzip2 flex gettext git gperf intltool libc6-dev-i386 libgdk-pixbuf2.0-dev libltdl-dev libtool-bin libxml-parser-perl make openssl p7zip-full patch perl pkg-config python ruby sed unzip wget xz-utils","title":"Pre-requisites"},{"location":"setting-up-build-env/#compile-openssl","text":"You need to compile a static version of OpenSSL, which is passed to the Qt5 configuration script. # Download openssl 1.0.2 ./Configure linux-x86_64 make","title":"Compile OpenSSL"},{"location":"setting-up-build-env/#static-build-of-qt5","text":"Download Qt5 sources mkdir -p ~/Qt/5.11.2 && cd ~/Qt/5.11.2 wget https://download.qt.io/archive/qt/5.11/5.11.2/single/qt-everywhere-src-5.11.2.tar.xz tar xvf qt-everywhere-src-5.11.2.tar.xz && cd qt-everywhere-src-5.11.2 Configure and build Qt5 statically. OPENSSL_LIBS = '-L/path/to/openssl-1.0.2q -lssl -lcrypto' ./configure -static -prefix ~/Qt/5.11.2/static -skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin -nomake examples -nomake tests -qt-zlib -qt-libpng -qt-xcb -qt-xkbcommon -feature-fontconfig -no-feature-getentropy -release -openssl-linked -opensource make -j $( nproc ) make -j $( nproc ) install","title":"Static build of Qt5"},{"location":"setting-up-build-env/#build-mxe-cross-compiled-qt5-for-windows-in-linux","text":"mkdir ~/github && cd ~/github git clone https://github.com/mxe/mxe.git cd mxe make -j $( nproc ) MXE_TARGETS = x86_64-w64-mingw32.static qtbase qtwebsockets","title":"Build MXE (Cross-compiled Qt5 for Windows in Linux)"},{"location":"setting-up-build-env/#build-zec-qt-wallet","text":"git clone git@github.com:ZcashFoundation/zec-qt-wallet.git ~/Qt/5.11.2/static/bin/qmake zec-qt-wallet.pro CONFIG += debug-spec linux-clang make -j $( nproc )","title":"Build zec-qt-wallet"},{"location":"setting-up-build-env/#compiling-zcashd-for-embedded-zcashd","text":"Compile embedded zcashd from adityapk00/zcashd The zcashd compilation is specific to adityapk00/zcashd as there are some custom patches for new RPC calls that help with the embedding of zcashd that are not included in the upstream zcash/zcash repository. git clone git@github.com:adityapk00/zcash zcash-linux git clone git@github.com:adityapk00/zcash zcash-win mkdir -p ~/zcash/artifacts # Built zcashd goes here. Note that we create two separate folders because we\u2019re going to compile zcashd for Windows and Linux. Build zcashd windows cd zcash-win ./mkreleasewin.sh Build zcashd Linux cd zcash-linux ./mkreleaselinux.sh","title":"Compiling zcashd for embedded zcashd"},{"location":"setting-up-build-env/#setup-environment","text":"Add the following paths to your ~/.bashrc . Remember to add it at the very top, before the interactivity check, because we need these variables even in an ssh shell. export QT_STATIC = ~/Qt/5.11.2/static/ export MXE_PATH = ~/github/mxe/usr/bin/ export ZCASH_DIR = ~/github/zcash","title":"Setup Environment"},{"location":"setting-up-build-env/#make-release-build","text":"PREV_VERSION = 0 .2.5 APP_VERSION = 0 .2.6 src/scripts/mkrelease.sh This will put all the Windows and Linux compiled binaries into the artifacts folder","title":"Make release build"},{"location":"setting-up-build-env/#macos","text":"Install Xcode or Xcode Command Line Tools, and then install Qt 5.11. From a terminal: cd ~/github/zec-qt-wallet/ APP_VERSION = 0 .3.0 src/scripts/mkmacdmg.sh This will build the app and package it into a dmg and place it in the artifacts/ folder","title":"macOS"},{"location":"setting-up-build-env/#building-zcashd","text":"git clone git@github.com:adityapk00/zcash cd zcash ./zcutil/build.sh -j $( nproc )","title":"Building zcashd"},{"location":"setting-up-build-env/#windows","text":"Even though zec-qt-wallet for Windows is cross-compiled on Linux, we still need a Windows machine to build the installer. The Windows installer is built using WiX toolset. Install WiX toolset 3.11.1 from here . After installation, add the directory to the system path (both candle.exe and light.exe are runnable) To build the installer, in Powershell, run: APP_VERSION = 0 .3.0 src/scripts/mkwininstaller.ps1","title":"Windows"},{"location":"setting-up-build-env/#running-the-unified-build","text":"After all these 3 machines have been set up, we can build all the release artifacts (Windows, Linux, macOS binaries and installers) with one command, triggered from the Windows machine. (Replace u1604 and macmini with names of the Linux and macOS machines respectively) cd ~/github/zec-qt-wallet . \\s rc \\s cripts \\d obuild.ps1 -version 0 .4.1 -prev 0 .4.0 -server u1604 -macserver macmini This will build all three platforms and their installers, and place everything in the artifacts folder on the Windows machine.","title":"Running the unified build"},{"location":"termsofservice/","text":"Terms of Service \u00b6 zcash-qt-wallet Terms of Service \u00b6 1. Terms \u00b6 By accessing the website at https://docs.zecqtwallet.com, you are agreeing to be bound by these terms of service, all applicable laws and regulations, and agree that you are responsible for compliance with any applicable local laws. If you do not agree with any of these terms, you are prohibited from using or accessing this site. The materials contained in this website are protected by applicable copyright and trademark law. 2. Use License \u00b6 Permission is granted to temporarily download one copy of the materials (information or software) on zcash-qt-wallet\u2019s website for personal, non-commercial transitory viewing only. This is the grant of a license, not a transfer of title, and under this license you may not: modify or copy the materials; use the materials for any commercial purpose, or for any public display (commercial or non-commercial); attempt to decompile or reverse engineer any software contained on zcash-qt-wallet\u2019s website; remove any copyright or other proprietary notations from the materials; or transfer the materials to another person or \u201cmirror\u201d the materials on any other server. This license shall automatically terminate if you violate any of these restrictions and may be terminated by zcash-qt-wallet at any time. Upon terminating your viewing of these materials or upon the termination of this license, you must destroy any downloaded materials in your possession whether in electronic or printed format. 3. Disclaimer \u00b6 The materials on zcash-qt-wallet\u2019s website are provided on an \u2018as is\u2019 basis. zcash-qt-wallet makes no warranties, expressed or implied, and hereby disclaims and negates all other warranties including, without limitation, implied warranties or conditions of merchantability, fitness for a particular purpose, or non-infringement of intellectual property or other violation of rights. Further, zcash-qt-wallet does not warrant or make any representations concerning the accuracy, likely results, or reliability of the use of the materials on its website or otherwise relating to such materials or on any sites linked to this site. 4. Limitations \u00b6 In no event shall zcash-qt-wallet or its suppliers be liable for any damages (including, without limitation, damages for loss of data or profit, or due to business interruption) arising out of the use or inability to use the materials on zcash-qt-wallet\u2019s website, even if zcash-qt-wallet or a zcash-qt-wallet authorized representative has been notified orally or in writing of the possibility of such damage. Because some jurisdictions do not allow limitations on implied warranties, or limitations of liability for consequential or incidental damages, these limitations may not apply to you. 5. Accuracy of materials \u00b6 The materials appearing on zcash-qt-wallet\u2019s website could include technical, typographical, or photographic errors. zcash-qt-wallet does not warrant that any of the materials on its website are accurate, complete or current. zcash-qt-wallet may make changes to the materials contained on its website at any time without notice. However zcash-qt-wallet does not make any commitment to update the materials. 6. Links \u00b6 zcash-qt-wallet has not reviewed all of the sites linked to its website and is not responsible for the contents of any such linked site. The inclusion of any link does not imply endorsement by zcash-qt-wallet of the site. Use of any such linked website is at the user\u2019s own risk. 7. Modifications \u00b6 zcash-qt-wallet may revise these terms of service for its website at any time without notice. By using this website you are agreeing to be bound by the then current version of these terms of service. 8. Governing Law \u00b6 These terms and conditions are governed by and construed in accordance with the laws of USA and you irrevocably submit to the exclusive jurisdiction of the courts in that State or location.","title":"Terms of Service"},{"location":"termsofservice/#terms-of-service","text":"","title":"Terms of Service"},{"location":"termsofservice/#zcash-qt-wallet-terms-of-service","text":"","title":"zcash-qt-wallet Terms of Service"},{"location":"termsofservice/#1-terms","text":"By accessing the website at https://docs.zecqtwallet.com, you are agreeing to be bound by these terms of service, all applicable laws and regulations, and agree that you are responsible for compliance with any applicable local laws. If you do not agree with any of these terms, you are prohibited from using or accessing this site. The materials contained in this website are protected by applicable copyright and trademark law.","title":"1. Terms"},{"location":"termsofservice/#2-use-license","text":"Permission is granted to temporarily download one copy of the materials (information or software) on zcash-qt-wallet\u2019s website for personal, non-commercial transitory viewing only. This is the grant of a license, not a transfer of title, and under this license you may not: modify or copy the materials; use the materials for any commercial purpose, or for any public display (commercial or non-commercial); attempt to decompile or reverse engineer any software contained on zcash-qt-wallet\u2019s website; remove any copyright or other proprietary notations from the materials; or transfer the materials to another person or \u201cmirror\u201d the materials on any other server. This license shall automatically terminate if you violate any of these restrictions and may be terminated by zcash-qt-wallet at any time. Upon terminating your viewing of these materials or upon the termination of this license, you must destroy any downloaded materials in your possession whether in electronic or printed format.","title":"2. Use License"},{"location":"termsofservice/#3-disclaimer","text":"The materials on zcash-qt-wallet\u2019s website are provided on an \u2018as is\u2019 basis. zcash-qt-wallet makes no warranties, expressed or implied, and hereby disclaims and negates all other warranties including, without limitation, implied warranties or conditions of merchantability, fitness for a particular purpose, or non-infringement of intellectual property or other violation of rights. Further, zcash-qt-wallet does not warrant or make any representations concerning the accuracy, likely results, or reliability of the use of the materials on its website or otherwise relating to such materials or on any sites linked to this site.","title":"3. Disclaimer"},{"location":"termsofservice/#4-limitations","text":"In no event shall zcash-qt-wallet or its suppliers be liable for any damages (including, without limitation, damages for loss of data or profit, or due to business interruption) arising out of the use or inability to use the materials on zcash-qt-wallet\u2019s website, even if zcash-qt-wallet or a zcash-qt-wallet authorized representative has been notified orally or in writing of the possibility of such damage. Because some jurisdictions do not allow limitations on implied warranties, or limitations of liability for consequential or incidental damages, these limitations may not apply to you.","title":"4. Limitations"},{"location":"termsofservice/#5-accuracy-of-materials","text":"The materials appearing on zcash-qt-wallet\u2019s website could include technical, typographical, or photographic errors. zcash-qt-wallet does not warrant that any of the materials on its website are accurate, complete or current. zcash-qt-wallet may make changes to the materials contained on its website at any time without notice. However zcash-qt-wallet does not make any commitment to update the materials.","title":"5. Accuracy of materials"},{"location":"termsofservice/#6-links","text":"zcash-qt-wallet has not reviewed all of the sites linked to its website and is not responsible for the contents of any such linked site. The inclusion of any link does not imply endorsement by zcash-qt-wallet of the site. Use of any such linked website is at the user\u2019s own risk.","title":"6. Links"},{"location":"termsofservice/#7-modifications","text":"zcash-qt-wallet may revise these terms of service for its website at any time without notice. By using this website you are agreeing to be bound by the then current version of these terms of service.","title":"7. Modifications"},{"location":"termsofservice/#8-governing-law","text":"These terms and conditions are governed by and construed in accordance with the laws of USA and you irrevocably submit to the exclusive jurisdiction of the courts in that State or location.","title":"8. Governing Law"},{"location":"translations/","text":"Translating zec-qt-wallet \u00b6 To help with translations, first clone/fork the zec-qt-wallet repository . In the res/ folder, you will find a number of *.ts files which contain the translations. If you don\u2019t find your language listed, please copy the zec-qt-wallet_template.ts file and use that. You can open the *.ts file (which is an XML file) and enter the translated strings manually using your favourite text editor, and enter the translations in the translation XML tag. It might be more productive to use the Qt Linguist tool , which provides a nice UI that has additional context and easily manages the strings for translations. Installing and using Qt Linguist \u00b6 You can install the Qt open source distribution from here , and that comes with Qt Linguist. You can launch it by launching /path/to/Qt5/bin/linguist res/zec_qt_wallet_<language code>.ts . Windows and Mac builds for standalone Qt Linguist are available here . Submitting translations \u00b6 Once you have updated the translations in the *.ts file, please create a pull request for the file. Please remember to \u201cconfirm\u201d the translations from the Linguist menu (or remove the \u201cunfinished\u201d tag from XML element, if you are editing manually). Incomplete translations You don\u2019t have to translate all the strings. You can do this incrementally, and zec-qt-wallet will use all available translated strings, else fall back to English. Testing translations \u00b6 If you want to test the translations locally, you\u2019ll have to compile zec-qt-wallet. Please see compiling from source instructions. Save the linguist file, and then, from a command prompt (remember to replace ln with your language code): # Compile the translations /path/to/qt5/bin/lrelease res/zec_qt_wallet_<ln>.ts # Add to the Qt5's base translations /path/to/qt5/bin/lconvert -o res/zec_<ln>.qm res/zec_qt_wallet_<ln>.qm /path/to/qt5/translations/qtbase_<ln>.qm # Copy to the res folder mv res/zec_<ln>.qm res/zec_qt_wallet_<ln>.qm After this, you can launch your compiled zec-qt-wallet with a LANG environment variable to force zec-qt-wallet to use that language. LANG = es ./zec-qt-wallet","title":"Translating zec-qt-wallet"},{"location":"translations/#translating-zec-qt-wallet","text":"To help with translations, first clone/fork the zec-qt-wallet repository . In the res/ folder, you will find a number of *.ts files which contain the translations. If you don\u2019t find your language listed, please copy the zec-qt-wallet_template.ts file and use that. You can open the *.ts file (which is an XML file) and enter the translated strings manually using your favourite text editor, and enter the translations in the translation XML tag. It might be more productive to use the Qt Linguist tool , which provides a nice UI that has additional context and easily manages the strings for translations.","title":"Translating zec-qt-wallet"},{"location":"translations/#installing-and-using-qt-linguist","text":"You can install the Qt open source distribution from here , and that comes with Qt Linguist. You can launch it by launching /path/to/Qt5/bin/linguist res/zec_qt_wallet_<language code>.ts . Windows and Mac builds for standalone Qt Linguist are available here .","title":"Installing and using Qt Linguist"},{"location":"translations/#submitting-translations","text":"Once you have updated the translations in the *.ts file, please create a pull request for the file. Please remember to \u201cconfirm\u201d the translations from the Linguist menu (or remove the \u201cunfinished\u201d tag from XML element, if you are editing manually). Incomplete translations You don\u2019t have to translate all the strings. You can do this incrementally, and zec-qt-wallet will use all available translated strings, else fall back to English.","title":"Submitting translations"},{"location":"translations/#testing-translations","text":"If you want to test the translations locally, you\u2019ll have to compile zec-qt-wallet. Please see compiling from source instructions. Save the linguist file, and then, from a command prompt (remember to replace ln with your language code): # Compile the translations /path/to/qt5/bin/lrelease res/zec_qt_wallet_<ln>.ts # Add to the Qt5's base translations /path/to/qt5/bin/lconvert -o res/zec_<ln>.qm res/zec_qt_wallet_<ln>.qm /path/to/qt5/translations/qtbase_<ln>.qm # Copy to the res folder mv res/zec_<ln>.qm res/zec_qt_wallet_<ln>.qm After this, you can launch your compiled zec-qt-wallet with a LANG environment variable to force zec-qt-wallet to use that language. LANG = es ./zec-qt-wallet","title":"Testing translations"},{"location":"troubleshooting/","text":"Troubleshooting issues \u00b6 The zcashd debug log \u00b6 The debug.log file is the first place to start for troubleshooting issues. The file is located in the data directory and by default is found in the following locations: Windows: %HOMEPATH%\\AppData\\Roaming\\Zcash\\debug.log macOS: ~/Library/Application Support/Zcash/debug.log Linux: ~/.zcash/debug.log If you have specified a custom datadir option then the debug.log file will be located in that directory. Using a tool such as tail you can view the last 100 lines with the following command: tail -n 100 ~/.zcash/debug.log On Windows %HOMEPATH% is typically C:\\Users\\username where username is your username. The zec-qt-wallet.log file \u00b6 As with the debug.log file, the zec-qt-wallet.log file will help to identify issues with the zec-qt-wallet application. Providing the latest output of this file can help in troubleshooting issues. The location of this file is in the following location for each platform: Windows: %HOMEPATH%\\AppData\\Roaming\\zec-qt-wallet-org\\zec-qt-wallet\\zec-qt-wallet.log macOS: /Users/gareth/Library/Application Support/zec-qt-wallet-org/zec-qt-wallet/zec-qt-wallet.log Linux: ~/.local/share/zec-qt-wallet-org/zec-qt-wallet/zec-qt-wallet.log My node isn\u2019t syncing or is slow to sync \u00b6 If your node isn\u2019t syncing or is slow to sync, first check that you are running the latest version of zec-qt-wallet then check that you have connections to other nodes as you may have a network issue. zec-qt-wallet will display if you are connected via the application footer. You can also find this information in the zcashd tab on the main menu (if you are running the embedded zcashd ) and it will list the number of connections to other peers, which should be greater than 0. If you do not have any connections then check your internet connection, then check that the ports required for zcashd are not blocked and that you have not specified a TOR connection in the options but do not have TOR running. If you are still having issues, then look in the debug log to identify any error messages. The speed of syncing is dependent on a number of variables such as memory, CPU and bandwidth as blocks are also verified in addition to being downloaded. zcashd ports \u00b6 By default zcashd runs on the following ports. 8232 for mainnet RPC 8233 for mainnet peer-to-peer network 18232 for testnet RPC 18233 for testnet peer-to-peer network You may override any of these values in zcash.conf . My transaction didn\u2019t get mined \u00b6 If you send a transaction before the node is fully synced, or perhaps due to network congestion then the transaction may fail and be returned to your wallet due to the Transaction Expiry feature. When a user submits a transaction to the network, by default it will persist in the mempool for 20 blocks (currently approximately 50 minutes). If it has not been mined after that period, it is no longer valid and will be evicted from all mempools. The value will return to the sender\u2019s wallet. zcashd has no connections \u00b6 See the section on syncing issues for common resolutions to this issue. Some of my shielded transactions are not displayed in the transaction tab \u00b6 By default zcashd does not store outgoing shielded transactions. To overcome this, zec-qt-wallet will store shielded sends locally and this option may be disabled and any saved transactions cleared. If you are missing any outgoing shielded transactions check that the option to Remember shielded transactions is selected in the wallet options . There is no way (currently) of recovering the information about outgoing fully shielded spends if this option is disabled. Sending from Sprout address to Sapling gives an error \u00b6 You cannot send directly from a Sprout address (zc) to a Sapling address (zs) as it must pass through the Sapling turnstile . See the details on the turnstile migration for details on how to move your funds from a Sprout address to a Sapling one in a privacy-preserving way. How to perform a wallet rescan \u00b6 Potentially slow wallet rescan Depending on the number of addresses in your wallet (particularly shielded addresses) a wallet rescan can be slow. Simply leave it running until the process is complete. If you need to perform a wallet rescan due to missing transactions or balance errors you will need to start zcashd with the -rescan option. There are a couple of methods to achieve this and this process will be improved in future versions of the zec-qt-wallet. Via an external zcashd \u00b6 If you are running the embedded zcashd you will need to run zcashd externally to run the rescan and once complete you can safely shut down the external zcashd and run zec-qt-wallet as normal. With zec-qt-wallet closed open a terminal/command prompt and run the following command depending on your platform (and adjust accordingly to match your system if required). Windows (installer): cmd /C \"\"C:\\Program Files (x86)\\zec-qt-wallet\\zcashd.exe\" -rescan\" Windows (binaries): zcashd.exe -rescan from the directory of the downloaded binaries. macOS: /Applications/zec-qt-wallet.app/Contents/MacOS/zcashd -rescan Linux (deb): zcashd -rescan Linux (binaries): ./zcashd -rescan from the directory of the downloaded binaries. Then open zec-qt-wallet and it should connect to the running zcashd and you can monitor the progress of the rescan on the startup screen. Note that the command above will open an instance of zcashd in the foreground, you can change this behaviour by adding the -daemon option. You will need to manually stop zcashd as zec-qt-wallet will not close an externally running node. The simplest method is to run the zcash-cli stop command: Windows (installer): cmd /C \"\"C:\\Program Files (x86)\\zec-qt-wallet\\zcash-cli.exe\" stop\" Windows (binaries): zcash-cli.exe stop from the directory of the downloaded binaries. macOS: /Applications/zec-qt-wallet.app/Contents/MacOS/zcash-cli stop Linux (deb): zcash-cli stop Linux (binaries): ./zcash-cli stop from the directory of the downloaded binaries. Once the rescan has been completed and the external zcashd node has been stopped you can continue to run zec-qt-wallet as normal. Editing zcash.conf \u00b6 As an alternative to the external zcashd you can edit the zcash.conf file and add the line rescan=1 and then start zec-qt-wallet normally. After you have opened zec-qt-wallet and the rescan is complete you must remove the line from zcash.conf to prevent the wallet from rescanning every time it is opened and close zec-qt-wallet as normal. How to perform a reindex \u00b6 A reindex is sometimes required when the blockchain data becomes corrupted or you wish to enable certain features. When a reindex happens the full blockchain is redownloaded so it will take some time to complete and should only be performed where absolutely necessary. To complete a reindex simply follow the instruction for a wallet rescan replacing -rescan with -reindex . zcashd -reindex The displayed balance is incorrect \u00b6 If your balance is not being correctly displayed, first ensure that your software is up to date and that your node is fully synced. If your balance is still incorrect you can perform a manual wallet rescan which will rescan the blockchain for missing wallet transactions on startup. Depending on the number of (shielded) addresses in the wallet, this can be (very) slow so just leave it running until complete and your balance should be reflected accurately. Common error messages \u00b6 Could not start embedded zcashd \u00b6 This means zec-qt-wallet couldn\u2019t start its embedded zcashd for some reason. zec-qt-wallet will show you another dialog box with the error reported from zcashd for debugging purposes as well. You might be able to solve this by simply restarting zec-qt-wallet, but if you repeatedly see this error, it might be one of the following reasons: If you compiled zec-qt-wallet yourself and are running it: zcashd doesn\u2019t come with the Github repository, so you\u2019ll have to compile zcashd separately and copy it over into your zec-qt-wallet directory. You might have corrupt zcash params: In this case, you may try deleting your params and letting zec-qt-wallet download them again. If all else fails, you can run an external zcashd and zec-qt-wallet will connect to it. Authentication error \u00b6 Normally, zec-qt-wallet can pick up the rpcuser/rpcpassword from zcash.conf . If it doesn\u2019t for some reason, you can set the username/password in the File->Settings menu. If you are connecting to a remote node, make sure that zcashd on the remote machine is accepting connections from your machine. The target machine\u2019s firewall needs to allow connections from your host and also zcashd is set to be configured to accept connections from this host. Using the RPC port over a remote interface is NOT RECOMMENDED Using the RPC port over a remote interface is NOT RECOMMENDED, because that will cause the rpcpassword to be transmitted over the network unencrypted, allowing any observer to steal your keys and take over the OS account running zcashd. Not enough balance when sending transactions \u00b6 The most likely cause for this is that you are trying to spend unconfirmed funds. Unlike Bitcoin, the Zcash protocol doesn\u2019t let you spent unconfirmed funds. Wait for at least one confirmation and then retry the transaction. My issue isn\u2019t resolved \u00b6 Open an issue on Github or tweet at @zecqtwallet for help.","title":"Troubleshooting Issues"},{"location":"troubleshooting/#troubleshooting-issues","text":"","title":"Troubleshooting issues"},{"location":"troubleshooting/#the-zcashd-debug-log","text":"The debug.log file is the first place to start for troubleshooting issues. The file is located in the data directory and by default is found in the following locations: Windows: %HOMEPATH%\\AppData\\Roaming\\Zcash\\debug.log macOS: ~/Library/Application Support/Zcash/debug.log Linux: ~/.zcash/debug.log If you have specified a custom datadir option then the debug.log file will be located in that directory. Using a tool such as tail you can view the last 100 lines with the following command: tail -n 100 ~/.zcash/debug.log On Windows %HOMEPATH% is typically C:\\Users\\username where username is your username.","title":"The zcashd debug log"},{"location":"troubleshooting/#the-zec-qt-walletlog-file","text":"As with the debug.log file, the zec-qt-wallet.log file will help to identify issues with the zec-qt-wallet application. Providing the latest output of this file can help in troubleshooting issues. The location of this file is in the following location for each platform: Windows: %HOMEPATH%\\AppData\\Roaming\\zec-qt-wallet-org\\zec-qt-wallet\\zec-qt-wallet.log macOS: /Users/gareth/Library/Application Support/zec-qt-wallet-org/zec-qt-wallet/zec-qt-wallet.log Linux: ~/.local/share/zec-qt-wallet-org/zec-qt-wallet/zec-qt-wallet.log","title":"The zec-qt-wallet.log file"},{"location":"troubleshooting/#my-node-isnt-syncing-or-is-slow-to-sync","text":"If your node isn\u2019t syncing or is slow to sync, first check that you are running the latest version of zec-qt-wallet then check that you have connections to other nodes as you may have a network issue. zec-qt-wallet will display if you are connected via the application footer. You can also find this information in the zcashd tab on the main menu (if you are running the embedded zcashd ) and it will list the number of connections to other peers, which should be greater than 0. If you do not have any connections then check your internet connection, then check that the ports required for zcashd are not blocked and that you have not specified a TOR connection in the options but do not have TOR running. If you are still having issues, then look in the debug log to identify any error messages. The speed of syncing is dependent on a number of variables such as memory, CPU and bandwidth as blocks are also verified in addition to being downloaded.","title":"My node isn't syncing or is slow to sync"},{"location":"troubleshooting/#zcashd-ports","text":"By default zcashd runs on the following ports. 8232 for mainnet RPC 8233 for mainnet peer-to-peer network 18232 for testnet RPC 18233 for testnet peer-to-peer network You may override any of these values in zcash.conf .","title":"zcashd ports"},{"location":"troubleshooting/#my-transaction-didnt-get-mined","text":"If you send a transaction before the node is fully synced, or perhaps due to network congestion then the transaction may fail and be returned to your wallet due to the Transaction Expiry feature. When a user submits a transaction to the network, by default it will persist in the mempool for 20 blocks (currently approximately 50 minutes). If it has not been mined after that period, it is no longer valid and will be evicted from all mempools. The value will return to the sender\u2019s wallet.","title":"My transaction didn't get mined"},{"location":"troubleshooting/#zcashd-has-no-connections","text":"See the section on syncing issues for common resolutions to this issue.","title":"zcashd has no connections"},{"location":"troubleshooting/#some-of-my-shielded-transactions-are-not-displayed-in-the-transaction-tab","text":"By default zcashd does not store outgoing shielded transactions. To overcome this, zec-qt-wallet will store shielded sends locally and this option may be disabled and any saved transactions cleared. If you are missing any outgoing shielded transactions check that the option to Remember shielded transactions is selected in the wallet options . There is no way (currently) of recovering the information about outgoing fully shielded spends if this option is disabled.","title":"Some of my shielded transactions are not displayed in the transaction tab"},{"location":"troubleshooting/#sending-from-sprout-address-to-sapling-gives-an-error","text":"You cannot send directly from a Sprout address (zc) to a Sapling address (zs) as it must pass through the Sapling turnstile . See the details on the turnstile migration for details on how to move your funds from a Sprout address to a Sapling one in a privacy-preserving way.","title":"Sending from Sprout address to Sapling gives an error"},{"location":"troubleshooting/#how-to-perform-a-wallet-rescan","text":"Potentially slow wallet rescan Depending on the number of addresses in your wallet (particularly shielded addresses) a wallet rescan can be slow. Simply leave it running until the process is complete. If you need to perform a wallet rescan due to missing transactions or balance errors you will need to start zcashd with the -rescan option. There are a couple of methods to achieve this and this process will be improved in future versions of the zec-qt-wallet.","title":"How to perform a wallet rescan"},{"location":"troubleshooting/#via-an-external-zcashd","text":"If you are running the embedded zcashd you will need to run zcashd externally to run the rescan and once complete you can safely shut down the external zcashd and run zec-qt-wallet as normal. With zec-qt-wallet closed open a terminal/command prompt and run the following command depending on your platform (and adjust accordingly to match your system if required). Windows (installer): cmd /C \"\"C:\\Program Files (x86)\\zec-qt-wallet\\zcashd.exe\" -rescan\" Windows (binaries): zcashd.exe -rescan from the directory of the downloaded binaries. macOS: /Applications/zec-qt-wallet.app/Contents/MacOS/zcashd -rescan Linux (deb): zcashd -rescan Linux (binaries): ./zcashd -rescan from the directory of the downloaded binaries. Then open zec-qt-wallet and it should connect to the running zcashd and you can monitor the progress of the rescan on the startup screen. Note that the command above will open an instance of zcashd in the foreground, you can change this behaviour by adding the -daemon option. You will need to manually stop zcashd as zec-qt-wallet will not close an externally running node. The simplest method is to run the zcash-cli stop command: Windows (installer): cmd /C \"\"C:\\Program Files (x86)\\zec-qt-wallet\\zcash-cli.exe\" stop\" Windows (binaries): zcash-cli.exe stop from the directory of the downloaded binaries. macOS: /Applications/zec-qt-wallet.app/Contents/MacOS/zcash-cli stop Linux (deb): zcash-cli stop Linux (binaries): ./zcash-cli stop from the directory of the downloaded binaries. Once the rescan has been completed and the external zcashd node has been stopped you can continue to run zec-qt-wallet as normal.","title":"Via an external zcashd"},{"location":"troubleshooting/#editing-zcashconf","text":"As an alternative to the external zcashd you can edit the zcash.conf file and add the line rescan=1 and then start zec-qt-wallet normally. After you have opened zec-qt-wallet and the rescan is complete you must remove the line from zcash.conf to prevent the wallet from rescanning every time it is opened and close zec-qt-wallet as normal.","title":"Editing zcash.conf"},{"location":"troubleshooting/#how-to-perform-a-reindex","text":"A reindex is sometimes required when the blockchain data becomes corrupted or you wish to enable certain features. When a reindex happens the full blockchain is redownloaded so it will take some time to complete and should only be performed where absolutely necessary. To complete a reindex simply follow the instruction for a wallet rescan replacing -rescan with -reindex . zcashd -reindex","title":"How to perform a reindex"},{"location":"troubleshooting/#the-displayed-balance-is-incorrect","text":"If your balance is not being correctly displayed, first ensure that your software is up to date and that your node is fully synced. If your balance is still incorrect you can perform a manual wallet rescan which will rescan the blockchain for missing wallet transactions on startup. Depending on the number of (shielded) addresses in the wallet, this can be (very) slow so just leave it running until complete and your balance should be reflected accurately.","title":"The displayed balance is incorrect"},{"location":"troubleshooting/#common-error-messages","text":"","title":"Common error messages"},{"location":"troubleshooting/#could-not-start-embedded-zcashd","text":"This means zec-qt-wallet couldn\u2019t start its embedded zcashd for some reason. zec-qt-wallet will show you another dialog box with the error reported from zcashd for debugging purposes as well. You might be able to solve this by simply restarting zec-qt-wallet, but if you repeatedly see this error, it might be one of the following reasons: If you compiled zec-qt-wallet yourself and are running it: zcashd doesn\u2019t come with the Github repository, so you\u2019ll have to compile zcashd separately and copy it over into your zec-qt-wallet directory. You might have corrupt zcash params: In this case, you may try deleting your params and letting zec-qt-wallet download them again. If all else fails, you can run an external zcashd and zec-qt-wallet will connect to it.","title":"Could not start embedded zcashd"},{"location":"troubleshooting/#authentication-error","text":"Normally, zec-qt-wallet can pick up the rpcuser/rpcpassword from zcash.conf . If it doesn\u2019t for some reason, you can set the username/password in the File->Settings menu. If you are connecting to a remote node, make sure that zcashd on the remote machine is accepting connections from your machine. The target machine\u2019s firewall needs to allow connections from your host and also zcashd is set to be configured to accept connections from this host. Using the RPC port over a remote interface is NOT RECOMMENDED Using the RPC port over a remote interface is NOT RECOMMENDED, because that will cause the rpcpassword to be transmitted over the network unencrypted, allowing any observer to steal your keys and take over the OS account running zcashd.","title":"Authentication error"},{"location":"troubleshooting/#not-enough-balance-when-sending-transactions","text":"The most likely cause for this is that you are trying to spend unconfirmed funds. Unlike Bitcoin, the Zcash protocol doesn\u2019t let you spent unconfirmed funds. Wait for at least one confirmation and then retry the transaction.","title":"Not enough balance when sending transactions"},{"location":"troubleshooting/#my-issue-isnt-resolved","text":"Open an issue on Github or tweet at @zecqtwallet for help.","title":"My issue isn't resolved"},{"location":"turnstile-migration/","text":"Turnstile Migration \u00b6 This is not an official implementation of the turnstile. zcashd has yet to implement support for the Sapling turnstile. There is an existing proposal in the form of a ZIP and you can follow the progress of development here . zec-qt-wallet is an individual implementation following the suggested privacy recommendations for implementation of the turnstile. If you are concerned, then wait until the official RPC tool is released into zcashd before migrating funds. Turnstile Migration overview \u00b6 The Sapling turnstile is an auditing mechanism for the number of ZEC in circulation. The Sapling turnstile provides accounting for the ZEC held in Sprout shielded addresses as they are migrated to Sapling shielded addresses. To achieve this, owners of shielded ZEC are required to send their balances to a transparent address before sending to Sapling shielded addresses. If you simply send the funds from a Sprout address to a transparent address and onwards to a Sapling address it would be relatively trivial to link the balances. zec-qt-wallet can migrate your Sprout funds to a Sapling address in a privacy-preserving manner following the privacy recommendations by: Creating new transparent addresses in your wallet to move from Sprout to transparent addresses. Splits the funds across multiple transparent addresses over multiple blocks. Uses round numbers to obscure any identifying information as these round number values, e.g. 10 will be very common in the blockchain. Using the turnstile tool \u00b6 To start the turnstile migration tool, open it by choosing Apps->Sapling Turnstile and choose the Sprout address (zc) to migrate funds from and the Sapling address (zs) to send funds too in addition to the number of days you would like to migrate the funds over. Generally, increasing the option to migrate over a larger number of blocks is the preferred solution but note that there will be an increase in the number of transactions, all of which require a fee. The migrate over 4 days (2304 blocks) requires 10 transactions resulting in fees of 0.001 ZEC for the migration. Note that you may only perform one migration at a time using the app. Closing the wallet during the migration. If you shut down the wallet, then it\u2019ll send any pending transactions on reopening, which may result in the undesired behaviour of multiple transactions occuring back-to-back. The wallet must be open for any transactions to be sent so you should open it frequently and preferably leave it open throughout. To check on the progress of the turnstile at any time visit Apps->Sapling Turnstile and you will be presented with the migration progress and the number of blocks until the next transaction. Backup your wallet.dat file after starting the migration. zec-qt-wallet creates new transparent addresses for the turnstile migration. You must create a backup after confirming the migration to ensure you have the private keys for these intermediate transparent addresses in case there is an issue. To do so visit File->Backup wallet.dat . Aborting the turnstile migration \u00b6 If at any time you wish to abort the migration visit Apps->Sapling Turnstile and choose Abort , and no further transactions will take place. After aborting, all the funds remain in the addresses when the migration was aborted.","title":"Turnstile Migration"},{"location":"turnstile-migration/#turnstile-migration","text":"This is not an official implementation of the turnstile. zcashd has yet to implement support for the Sapling turnstile. There is an existing proposal in the form of a ZIP and you can follow the progress of development here . zec-qt-wallet is an individual implementation following the suggested privacy recommendations for implementation of the turnstile. If you are concerned, then wait until the official RPC tool is released into zcashd before migrating funds.","title":"Turnstile Migration"},{"location":"turnstile-migration/#turnstile-migration-overview","text":"The Sapling turnstile is an auditing mechanism for the number of ZEC in circulation. The Sapling turnstile provides accounting for the ZEC held in Sprout shielded addresses as they are migrated to Sapling shielded addresses. To achieve this, owners of shielded ZEC are required to send their balances to a transparent address before sending to Sapling shielded addresses. If you simply send the funds from a Sprout address to a transparent address and onwards to a Sapling address it would be relatively trivial to link the balances. zec-qt-wallet can migrate your Sprout funds to a Sapling address in a privacy-preserving manner following the privacy recommendations by: Creating new transparent addresses in your wallet to move from Sprout to transparent addresses. Splits the funds across multiple transparent addresses over multiple blocks. Uses round numbers to obscure any identifying information as these round number values, e.g. 10 will be very common in the blockchain.","title":"Turnstile Migration overview"},{"location":"turnstile-migration/#using-the-turnstile-tool","text":"To start the turnstile migration tool, open it by choosing Apps->Sapling Turnstile and choose the Sprout address (zc) to migrate funds from and the Sapling address (zs) to send funds too in addition to the number of days you would like to migrate the funds over. Generally, increasing the option to migrate over a larger number of blocks is the preferred solution but note that there will be an increase in the number of transactions, all of which require a fee. The migrate over 4 days (2304 blocks) requires 10 transactions resulting in fees of 0.001 ZEC for the migration. Note that you may only perform one migration at a time using the app. Closing the wallet during the migration. If you shut down the wallet, then it\u2019ll send any pending transactions on reopening, which may result in the undesired behaviour of multiple transactions occuring back-to-back. The wallet must be open for any transactions to be sent so you should open it frequently and preferably leave it open throughout. To check on the progress of the turnstile at any time visit Apps->Sapling Turnstile and you will be presented with the migration progress and the number of blocks until the next transaction. Backup your wallet.dat file after starting the migration. zec-qt-wallet creates new transparent addresses for the turnstile migration. You must create a backup after confirming the migration to ensure you have the private keys for these intermediate transparent addresses in case there is an issue. To do so visit File->Backup wallet.dat .","title":"Using the turnstile tool"},{"location":"turnstile-migration/#aborting-the-turnstile-migration","text":"If at any time you wish to abort the migration visit Apps->Sapling Turnstile and choose Abort , and no further transactions will take place. After aborting, all the funds remain in the addresses when the migration was aborted.","title":"Aborting the turnstile migration"},{"location":"using-zec-qt-wallet/","text":"Using zec-qt-wallet \u00b6 Getting started \u00b6 Initial Parameters Download The first time zec-qt-wallet starts it will create a zcash.conf file with default configuration values as well as downloading the parameters required for sending and validating shielded transactions. These parameters are currently around 1.7GB in size and only need to be downloaded once. Now that you have zec-qt-wallet installed it is time to start using the software. If you are using the embedded zcashd and it is your first time using the software, the system parameters will be downloaded from the internet (~1.7GB) and a zcash.conf file created specifying some default configuration values. The blockchain will then begin to sync, which is a time-consuming process taking anywhere of the order of 8 hours to days depending on your hardware and network performance. You can monitor the progress in the bottom right corner of zec-qt-wallet which displays the number of blocks downloaded and a sync percentage. Initial Sync The blockchain is around 22GB in size and will take around 8+ hours to download. Monitor the progress via the sync progress in the bottom right corner of zec-qt-wallet. Generating a new address \u00b6 Visiting the Receive tab of zec-qt-wallet will show all current addresses in the wallet and enable you to generate new ones. To learn about the different types of addresses available in Zcash which are transparent, shielded (Sprout and Sapling) please visit this page . It is not possible to remove an address from the wallet once it has been generated. Backup after generating a new address Whenever a new address is generated you should ensure that you have a backup of the address. Only Sapling uses a HD wallet and can be recreated from a seed whereas transparent or Sprout addresses either require the private key or a wallet.dat backup made after the address was created. See the Backing up section for more details. Transparent addresses are automatically created when clicking the t-Addr button as transparent addresses should not be reused. Unlike transparent addresses, it is fine to reuse shielded addresses and so new addresses can be manually created on-demand via the New Address button. Optionally, add a label to easily identify the address and add it to your address book. A QR code is also provided for the address which may be used to scan into a compatible application to receive funds. zec-qt-wallet will also show if the address has been previously used. Sending a transaction \u00b6 Once you\u2019ve generated an address and have sent some funds to it, you can send some ZEC. Click on the Send tab: You can only send funds with at least one confirmation. While transactions are being confirmed, they are easily identifiable as they are highlighted in red. Choose an address with funds in it and enter the recipient address. You may specify multiple recipients per transaction, and there may be a mixture of transparent and shielded recipients. The Memo field is only available when sending to a shielded address (either Sprout or Sapling). The default mining fee is 0.0001 ZEC which is recommended for all transactions. See the Options section if you wish to customise this behaviour and understand the implications. Shielded send requirements Sending Sapling transaction require little resource usage and happen in a few seconds. If you still have funds in legacy Sprout addresses sending times are typically around 70-90 seconds and require an additional 1.3GB of memory to perform the spend. Viewing transaction on explorer \u00b6 Once complete, the txid will be displayed. Right-click to bring up a menu to view on a block explorer. Alternatively, for any transactions on the Transactions tab right click and choose View on block explorer . This will open up the transaction on a block explorer . If your transaction is a shielded one there will not be any public information available except the fee paid. Pay Zcash URI \u00b6 You can enter a Zcash URI by visiting File->Pay Zcash URI and pasting in the payment link. Zcash payment URIs encode the address, amount and memo into a single convenient string, so you can enter it into zec-qt-wallet and make payments easily. Address book \u00b6 The address book makes managing addresses and labels simple. Either select Address Book in the application menu or select the button on the Send tab. You can import an address book in csv format and users of WinZEC can import an existing address book . Backing up \u00b6 zec-qt-wallet provides multiple options to ensure your wallet and keys are backed up. It is important that you perform regular backups if you are not exclusively using Sapling addresses and have the Sapling seed. While Sapling has a HD wallet , support for importing the seed is not yet available. It is not yet possible to import a Sapling HD seed While Sapling provides a HD wallet the feature for importing the seed does not yet exist, so while your funds would not be lost in the situation where you have the seed they would be rendered unusable until this feature is added. Therefore it is recommended you keep regular backups of either private keys or the wallet.dat file until this feature is implemented. Export a single private key \u00b6 To export a single private key on the Balance tab right click on the address and choose Get private key from the context menu. Alternatively, on the Receive tab choose the address in question and click the Export Private Key . The output of both is the private key which you can copy to a secure storage medium or be used to import into other applications. Export all private keys \u00b6 You can export all private keys for addresses in your wallet by choosing the File->Export all private keys menu option. This will provide a list of all private keys in the wallet. Note that by default when zcashd starts it creates 100 transparent addresses for the keypool for use as change addresses, hence this list will always contain at least 100 transparent address keys, not all of which have been used. Backing up wallet.dat \u00b6 You can backup all of your private keys by making a copy of the wallet.dat file. To restore, you then replace any existing wallet.dat file in the data directory and start zec-qt-wallet as normal. Create a new backup after each new address generated As new addresses are generated you will need to create an updated backup, else the new private keys will not be included. While this is a convenient method of backing up, it means that you are restricted to importing to software compatible with zcashd and also if you have many addresses that are unused it will slow rescanning of the wallet over importing only your addresses with funds. Importing private keys \u00b6 To import a private key, choose File->Import private key from the menu. You may paste in multiple keys, one per line that will be imported into the wallet. Note that depending on the number of keys to import and if they are shielded addresses it may take some time for the import to be completed. zeq-qt-wallet options \u00b6 zec-qt wallet has a number of options that allow you to customise how the application behaves and may be accessed in the Settings->Options menu as shown below. Remember shielded transactions \u00b6 By default zcashd will not store information about your outgoing fully shielded transactions (z->z). If this option is selected, zec-qt-wallet will store outgoing transactions locally so that any shielded spends will appear in the transactions tab. If you do not wish these transactions to be saved by zec-qt-wallet simply toggle the option for Remember shielded transactions . At any point, you may clear your shielded transaction history locally by choosing the Clear History button (there is no way of recovering this data once cleared). Allow custom fees \u00b6 Choose this option to allow the ability to change the default 0.0001 ZEC transaction fee. As all fees are transparent it is highly recommended that you use the default fee for all transactions to make your transactions indistinguishable. Shield change to your Sapling address \u00b6 Like Bitcoin, when using transparent addresses, change from a transaction goes to a new transparent address which can lead to your funds being spread over multiple addresses. zec-qt-wallet allows you to set an option to automatically send this change to a Sapling address via the Shield change from t-Addresses to your sapling address option. This was implemented in Bitcoin (and inherited in Zcash transparent addresses) as a privacy measure to prevent trivial linking of transactions on the blockchain so shielded (z) addresses do not have this property and any change is returned to the sending (z) address. Connect via TOR \u00b6 When using Zcash it does nothing to preserve your network level privacy so a unique IP address can allow network observers to correlate your Zcash transactions with each other and with your other traffic. To overcome this, you may use TOR to obfuscate your IP address. You will first need to have TOR installed which you may do from the official site . You will need to download and run the TOR Expert Bundle (not TOR browser). TOR is also available on all popular package managers, e.g. macOS brew install tor or Debian apt install tor . Once running, choose the option in zec-qt-wallet to Connect via TOR and the following line will be added to your zcash.conf file to configure TOR usage proxy=127.0.0.1:9050 . Restart zec-qt-wallet to enable the service running over TOR. Use the advanced options when installing zec-qt-wallet to run zcashd over TOR from the initial startup, so your IP is never exposed to the network. Parameters are not currently downloaded over TOR The Zcash parameters that are downloaded on the first launch are not done so over TOR depending on your network configuration. Onion Nodes \u00b6 You can connect to Zcash nodes only behind onion addresses by adding the following into your zcash.conf file, which will ensure that your IP address is not exposed to any Zcash-related services when running zec-qt-wallet. proxy=127.0.0.1:9050 onlynet=onion Then provide a list of onion nodes to connect to. A sample list is provided below but these may change over time. addnode=zcmaintvsivr7pcn.onion addnode=zcashiqykswlzpsu.onion addnode=zcashqhrmju6zfhn.onion addnode=zcashgmvxwrmjsut.onion addnode=zcashz3uma65ix7b.onion addnode=zcashiyf4kxluf3x.onion addnode=zcashwfe4x3jkz2b.onion addnode=zcashvkeki52iqpc.onion addnode=zcasha3cmfrpy7b7.onion addnode=zcashz7ed3nvbdxm.onion addnode=zcash5adwfpxfuvf.onion addnode=zcashixg5ol2ndo4.onion addnode=zcashuzwa365oh3n.onion addnode=zcashskbeoiwtym3.onion addnode=zcashuyvk5e7qfzy.onion addnode=fhsxfrwpyrtoxeal.onion addnode=zcash2iihed2wdux.onion addnode=w3dxku36wbp3lowx.onion addnode=zcashuhmzycmlwld.onion Encrypted Memo field \u00b6 The encrypted memo field allows a user to include an optional memo of up to 512 bytes in their transaction. As the transaction is encrypted on the blockchain only the recipient of the transaction can read the memo. This could, for example, be used to include information about the sender for a purchase or a refund address and there is more detail about potential uses of this field in this blog post . You can only include a memo when sending to a shielded address. To include a memo in a transaction click the Memo button and it will provide a textbox allowing you to enter 512 characters. Including a reply-to address \u00b6 If you want to send a reply-to address in the memo field, for example, if you are using the memo field as an encrypted chat application, zec-qt-wallet allows you to include a reply-to address in a standard format. To use, press the Include Reply Address and the sending address will automatically be inserted. Replying to a memo \u00b6 If you receive a transaction with a memo that contains a reply address , you can reply to it directly from the transactions table. Simply right-click the transaction and choose Reply to xxx . Exporting transactions \u00b6 zec-qt-wallet allows you to export all transactions via the File->Export Transactions menu item. You will be prompted where to store the exported file and it will be saved as a csv file with the following headers: Type Address Date/Time Amount Memo receive zs123\u2026 Sun Feb 17 13:42:38 2019 10 ZEC I am a secret memo Apps \u00b6 zec-qt-wallet bundles some applications to make common tasks simpler. Using z-board.net \u00b6 z-board.net is a message board based on the encrypted memo field . When using shielded addresses messages are anonymous. zec-qt-wallet integrates with the z-board.net service by allowing you to choose topics and post to the correct address without manually adding it. Turnstile migration \u00b6 See the page on the turnstile migration for full details. Customising zcash.conf \u00b6 The zcash.conf file may be used to customise how the underlying zcashd software behaves. There are many configuration options available . When zec-qt-wallet is installed it creates this file with sensible defaults such as connecting to the mainnet and a random rpcpassword. The location of zcash.conf varies by system. It is located in the following location on each platform: Windows: %HOMEPATH%\\AppData\\Roaming\\Zcash\\zcash.conf macOS: ~/Library/Application Support/Zcash/zcash.conf Linux: ~/.zcash/zcash.conf Connecting to an external zcashd \u00b6 If you have an external zcashd running zec-qt-wallet will attempt to connect to it automatically. If this fails you can manually set the required settings via the Edit->Settings menu item and specifying the connection details in the zcashd connection tab. Note that the easiest way to connect to a remote node is to SSH to it with port forwarding: ssh -L8232:127.0.0.1:8232 user@remotehost You can disable the embedded zcashd and force zec-qt-wallet to only connect to an external node by starting zec-qt-wallet with the -no-embedded option. Exposing RPC port Using the RPC port over a remote interface is NOT RECOMMENDED, because that will cause the rpcpassword to be transmitted over the network unencrypted, allowing any observer to steal your keys and Zcash and take over the OS account running zcashd.","title":"Using zec-qt-wallet"},{"location":"using-zec-qt-wallet/#using-zec-qt-wallet","text":"","title":"Using zec-qt-wallet"},{"location":"using-zec-qt-wallet/#getting-started","text":"Initial Parameters Download The first time zec-qt-wallet starts it will create a zcash.conf file with default configuration values as well as downloading the parameters required for sending and validating shielded transactions. These parameters are currently around 1.7GB in size and only need to be downloaded once. Now that you have zec-qt-wallet installed it is time to start using the software. If you are using the embedded zcashd and it is your first time using the software, the system parameters will be downloaded from the internet (~1.7GB) and a zcash.conf file created specifying some default configuration values. The blockchain will then begin to sync, which is a time-consuming process taking anywhere of the order of 8 hours to days depending on your hardware and network performance. You can monitor the progress in the bottom right corner of zec-qt-wallet which displays the number of blocks downloaded and a sync percentage. Initial Sync The blockchain is around 22GB in size and will take around 8+ hours to download. Monitor the progress via the sync progress in the bottom right corner of zec-qt-wallet.","title":"Getting started"},{"location":"using-zec-qt-wallet/#generating-a-new-address","text":"Visiting the Receive tab of zec-qt-wallet will show all current addresses in the wallet and enable you to generate new ones. To learn about the different types of addresses available in Zcash which are transparent, shielded (Sprout and Sapling) please visit this page . It is not possible to remove an address from the wallet once it has been generated. Backup after generating a new address Whenever a new address is generated you should ensure that you have a backup of the address. Only Sapling uses a HD wallet and can be recreated from a seed whereas transparent or Sprout addresses either require the private key or a wallet.dat backup made after the address was created. See the Backing up section for more details. Transparent addresses are automatically created when clicking the t-Addr button as transparent addresses should not be reused. Unlike transparent addresses, it is fine to reuse shielded addresses and so new addresses can be manually created on-demand via the New Address button. Optionally, add a label to easily identify the address and add it to your address book. A QR code is also provided for the address which may be used to scan into a compatible application to receive funds. zec-qt-wallet will also show if the address has been previously used.","title":"Generating a new address"},{"location":"using-zec-qt-wallet/#sending-a-transaction","text":"Once you\u2019ve generated an address and have sent some funds to it, you can send some ZEC. Click on the Send tab: You can only send funds with at least one confirmation. While transactions are being confirmed, they are easily identifiable as they are highlighted in red. Choose an address with funds in it and enter the recipient address. You may specify multiple recipients per transaction, and there may be a mixture of transparent and shielded recipients. The Memo field is only available when sending to a shielded address (either Sprout or Sapling). The default mining fee is 0.0001 ZEC which is recommended for all transactions. See the Options section if you wish to customise this behaviour and understand the implications. Shielded send requirements Sending Sapling transaction require little resource usage and happen in a few seconds. If you still have funds in legacy Sprout addresses sending times are typically around 70-90 seconds and require an additional 1.3GB of memory to perform the spend.","title":"Sending a transaction"},{"location":"using-zec-qt-wallet/#viewing-transaction-on-explorer","text":"Once complete, the txid will be displayed. Right-click to bring up a menu to view on a block explorer. Alternatively, for any transactions on the Transactions tab right click and choose View on block explorer . This will open up the transaction on a block explorer . If your transaction is a shielded one there will not be any public information available except the fee paid.","title":"Viewing transaction on explorer"},{"location":"using-zec-qt-wallet/#pay-zcash-uri","text":"You can enter a Zcash URI by visiting File->Pay Zcash URI and pasting in the payment link. Zcash payment URIs encode the address, amount and memo into a single convenient string, so you can enter it into zec-qt-wallet and make payments easily.","title":"Pay Zcash URI"},{"location":"using-zec-qt-wallet/#address-book","text":"The address book makes managing addresses and labels simple. Either select Address Book in the application menu or select the button on the Send tab. You can import an address book in csv format and users of WinZEC can import an existing address book .","title":"Address book"},{"location":"using-zec-qt-wallet/#backing-up","text":"zec-qt-wallet provides multiple options to ensure your wallet and keys are backed up. It is important that you perform regular backups if you are not exclusively using Sapling addresses and have the Sapling seed. While Sapling has a HD wallet , support for importing the seed is not yet available. It is not yet possible to import a Sapling HD seed While Sapling provides a HD wallet the feature for importing the seed does not yet exist, so while your funds would not be lost in the situation where you have the seed they would be rendered unusable until this feature is added. Therefore it is recommended you keep regular backups of either private keys or the wallet.dat file until this feature is implemented.","title":"Backing up"},{"location":"using-zec-qt-wallet/#export-a-single-private-key","text":"To export a single private key on the Balance tab right click on the address and choose Get private key from the context menu. Alternatively, on the Receive tab choose the address in question and click the Export Private Key . The output of both is the private key which you can copy to a secure storage medium or be used to import into other applications.","title":"Export a single private key"},{"location":"using-zec-qt-wallet/#export-all-private-keys","text":"You can export all private keys for addresses in your wallet by choosing the File->Export all private keys menu option. This will provide a list of all private keys in the wallet. Note that by default when zcashd starts it creates 100 transparent addresses for the keypool for use as change addresses, hence this list will always contain at least 100 transparent address keys, not all of which have been used.","title":"Export all private keys"},{"location":"using-zec-qt-wallet/#backing-up-walletdat","text":"You can backup all of your private keys by making a copy of the wallet.dat file. To restore, you then replace any existing wallet.dat file in the data directory and start zec-qt-wallet as normal. Create a new backup after each new address generated As new addresses are generated you will need to create an updated backup, else the new private keys will not be included. While this is a convenient method of backing up, it means that you are restricted to importing to software compatible with zcashd and also if you have many addresses that are unused it will slow rescanning of the wallet over importing only your addresses with funds.","title":"Backing up wallet.dat"},{"location":"using-zec-qt-wallet/#importing-private-keys","text":"To import a private key, choose File->Import private key from the menu. You may paste in multiple keys, one per line that will be imported into the wallet. Note that depending on the number of keys to import and if they are shielded addresses it may take some time for the import to be completed.","title":"Importing private keys"},{"location":"using-zec-qt-wallet/#zeq-qt-wallet-options","text":"zec-qt wallet has a number of options that allow you to customise how the application behaves and may be accessed in the Settings->Options menu as shown below.","title":"zeq-qt-wallet options"},{"location":"using-zec-qt-wallet/#remember-shielded-transactions","text":"By default zcashd will not store information about your outgoing fully shielded transactions (z->z). If this option is selected, zec-qt-wallet will store outgoing transactions locally so that any shielded spends will appear in the transactions tab. If you do not wish these transactions to be saved by zec-qt-wallet simply toggle the option for Remember shielded transactions . At any point, you may clear your shielded transaction history locally by choosing the Clear History button (there is no way of recovering this data once cleared).","title":"Remember shielded transactions"},{"location":"using-zec-qt-wallet/#allow-custom-fees","text":"Choose this option to allow the ability to change the default 0.0001 ZEC transaction fee. As all fees are transparent it is highly recommended that you use the default fee for all transactions to make your transactions indistinguishable.","title":"Allow custom fees"},{"location":"using-zec-qt-wallet/#shield-change-to-your-sapling-address","text":"Like Bitcoin, when using transparent addresses, change from a transaction goes to a new transparent address which can lead to your funds being spread over multiple addresses. zec-qt-wallet allows you to set an option to automatically send this change to a Sapling address via the Shield change from t-Addresses to your sapling address option. This was implemented in Bitcoin (and inherited in Zcash transparent addresses) as a privacy measure to prevent trivial linking of transactions on the blockchain so shielded (z) addresses do not have this property and any change is returned to the sending (z) address.","title":"Shield change to your Sapling address"},{"location":"using-zec-qt-wallet/#connect-via-tor","text":"When using Zcash it does nothing to preserve your network level privacy so a unique IP address can allow network observers to correlate your Zcash transactions with each other and with your other traffic. To overcome this, you may use TOR to obfuscate your IP address. You will first need to have TOR installed which you may do from the official site . You will need to download and run the TOR Expert Bundle (not TOR browser). TOR is also available on all popular package managers, e.g. macOS brew install tor or Debian apt install tor . Once running, choose the option in zec-qt-wallet to Connect via TOR and the following line will be added to your zcash.conf file to configure TOR usage proxy=127.0.0.1:9050 . Restart zec-qt-wallet to enable the service running over TOR. Use the advanced options when installing zec-qt-wallet to run zcashd over TOR from the initial startup, so your IP is never exposed to the network. Parameters are not currently downloaded over TOR The Zcash parameters that are downloaded on the first launch are not done so over TOR depending on your network configuration.","title":"Connect via TOR"},{"location":"using-zec-qt-wallet/#onion-nodes","text":"You can connect to Zcash nodes only behind onion addresses by adding the following into your zcash.conf file, which will ensure that your IP address is not exposed to any Zcash-related services when running zec-qt-wallet. proxy=127.0.0.1:9050 onlynet=onion Then provide a list of onion nodes to connect to. A sample list is provided below but these may change over time. addnode=zcmaintvsivr7pcn.onion addnode=zcashiqykswlzpsu.onion addnode=zcashqhrmju6zfhn.onion addnode=zcashgmvxwrmjsut.onion addnode=zcashz3uma65ix7b.onion addnode=zcashiyf4kxluf3x.onion addnode=zcashwfe4x3jkz2b.onion addnode=zcashvkeki52iqpc.onion addnode=zcasha3cmfrpy7b7.onion addnode=zcashz7ed3nvbdxm.onion addnode=zcash5adwfpxfuvf.onion addnode=zcashixg5ol2ndo4.onion addnode=zcashuzwa365oh3n.onion addnode=zcashskbeoiwtym3.onion addnode=zcashuyvk5e7qfzy.onion addnode=fhsxfrwpyrtoxeal.onion addnode=zcash2iihed2wdux.onion addnode=w3dxku36wbp3lowx.onion addnode=zcashuhmzycmlwld.onion","title":"Onion Nodes"},{"location":"using-zec-qt-wallet/#encrypted-memo-field","text":"The encrypted memo field allows a user to include an optional memo of up to 512 bytes in their transaction. As the transaction is encrypted on the blockchain only the recipient of the transaction can read the memo. This could, for example, be used to include information about the sender for a purchase or a refund address and there is more detail about potential uses of this field in this blog post . You can only include a memo when sending to a shielded address. To include a memo in a transaction click the Memo button and it will provide a textbox allowing you to enter 512 characters.","title":"Encrypted Memo field"},{"location":"using-zec-qt-wallet/#including-a-reply-to-address","text":"If you want to send a reply-to address in the memo field, for example, if you are using the memo field as an encrypted chat application, zec-qt-wallet allows you to include a reply-to address in a standard format. To use, press the Include Reply Address and the sending address will automatically be inserted.","title":"Including a reply-to address"},{"location":"using-zec-qt-wallet/#replying-to-a-memo","text":"If you receive a transaction with a memo that contains a reply address , you can reply to it directly from the transactions table. Simply right-click the transaction and choose Reply to xxx .","title":"Replying to a memo"},{"location":"using-zec-qt-wallet/#exporting-transactions","text":"zec-qt-wallet allows you to export all transactions via the File->Export Transactions menu item. You will be prompted where to store the exported file and it will be saved as a csv file with the following headers: Type Address Date/Time Amount Memo receive zs123\u2026 Sun Feb 17 13:42:38 2019 10 ZEC I am a secret memo","title":"Exporting transactions"},{"location":"using-zec-qt-wallet/#apps","text":"zec-qt-wallet bundles some applications to make common tasks simpler.","title":"Apps"},{"location":"using-zec-qt-wallet/#using-z-boardnet","text":"z-board.net is a message board based on the encrypted memo field . When using shielded addresses messages are anonymous. zec-qt-wallet integrates with the z-board.net service by allowing you to choose topics and post to the correct address without manually adding it.","title":"Using z-board.net"},{"location":"using-zec-qt-wallet/#turnstile-migration","text":"See the page on the turnstile migration for full details.","title":"Turnstile migration"},{"location":"using-zec-qt-wallet/#customising-zcashconf","text":"The zcash.conf file may be used to customise how the underlying zcashd software behaves. There are many configuration options available . When zec-qt-wallet is installed it creates this file with sensible defaults such as connecting to the mainnet and a random rpcpassword. The location of zcash.conf varies by system. It is located in the following location on each platform: Windows: %HOMEPATH%\\AppData\\Roaming\\Zcash\\zcash.conf macOS: ~/Library/Application Support/Zcash/zcash.conf Linux: ~/.zcash/zcash.conf","title":"Customising zcash.conf"},{"location":"using-zec-qt-wallet/#connecting-to-an-external-zcashd","text":"If you have an external zcashd running zec-qt-wallet will attempt to connect to it automatically. If this fails you can manually set the required settings via the Edit->Settings menu item and specifying the connection details in the zcashd connection tab. Note that the easiest way to connect to a remote node is to SSH to it with port forwarding: ssh -L8232:127.0.0.1:8232 user@remotehost You can disable the embedded zcashd and force zec-qt-wallet to only connect to an external node by starting zec-qt-wallet with the -no-embedded option. Exposing RPC port Using the RPC port over a remote interface is NOT RECOMMENDED, because that will cause the rpcpassword to be transmitted over the network unencrypted, allowing any observer to steal your keys and Zcash and take over the OS account running zcashd.","title":"Connecting to an external zcashd"}]}